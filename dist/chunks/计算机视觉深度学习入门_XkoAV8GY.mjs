const id = "计算机视觉深度学习入门.md";
						const collection = "posts";
						const slug = "计算机视觉深度学习入门";
						const body = "\n# 前言\n\nFYT视觉组培训，针对RoboMaster的深度学习速成课。\n\n预备知识：\n\n- 学习完前面的C++培训知识，有基本的编程能力。\n- 掌握Python的基本语法。\n\n参考书籍：\n\n- Deep Learning with Python Second Edition (主要讲tensorflow)\n- DIVE INTO DEEP LEARNING (主要讲pytorch)\n- 了解CV与RoboMaster视觉组 (视觉组圣经)\n\n讲解人\n\n> 计科2205 蔡明辰\n\n---\n\n# 1. 计算机视觉深度学习入门\n\n计算机视觉是深度学习最早也是最重要的成功案例。当时一类叫做**卷积神经网络**(Convolutional Neural Network, CNN)的神经网络模型在图像分类任务上取得了非常优秀的性能，从此计算机视觉领域进入了深度学习时代。**卷积神经网络**是计算机视觉领域最常用的深度学习模型，也是我们主要学习的内容。\n\n## 1.1 从认识一个卷积神经网络(CNN)开始\n\n我们先来看一个简单的卷积神经网络模型示例，用语对MNIST数据集进行分类。虽然在上一讲我们已经用密链接网络做过，当时的测试精度约为97%，但现在我们用卷积神经网络来做，效果会更好。\n\n```python\nimport torch\nimport torch.nn as nn\n\nclass LeNet(nn.Module):\n    def __init__(self, num_classes=10):\n        super(LeNet, self).__init__()\n        # 卷积层1\n        self.conv1 = nn.Conv2d(in_channels=1, out_channels=6, kernel_size=5, stride=1, padding=2)\n        # 池化(汇聚)层1\n        self.pool1 = nn.MaxPool2d(kernel_size=2)\n        # 卷积层2\n        self.conv2 = nn.Conv2d(in_channels=6, out_channels=16, kernel_size=5, stride=1)\n        # 池化(汇聚)层2\n        self.pool2 = nn.MaxPool2d(kernel_size=2)\n        # 展开\n        self.flatten = nn.Flatten()\n        # 三个全连接层\n        self.fc1 = nn.Linear(in_features=16 * 5 * 5, out_features=120)\n        self.fc2 = nn.Linear(in_features=120, out_features=84)\n        self.fc3 = nn.Linear(in_features=84, out_features=num_classes)\n        # 声明两个激活函数\n        self.act = nn.ReLU(inplace=True)\n        self.softmax = nn.Softmax(dim=1)\n\n    def forward(self, x):\n        y = self.act(self.conv1(x))\n        y = self.pool1(y)\n        y = self.act(self.conv2(y))\n        y = self.pool2(y)\n        y = self.flatten(y)\n        y = self.act(self.fc1(y))\n        y = self.act(self.fc2(y))\n        y = self.fc3(y)\n        y = self.softmax(y)\n        return y\n```\n\n```python\nfrom torchsummary import summary\n\n# 创建模型实例\nmodel = LeNet(num_classes=10)\n\n# 将模型放到设备上 (CPU 或 GPU)\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\n\n# 使用 torchsummary 显示模型摘要\nsummary(model, input_size=(1, 28, 28))\n```\n\n```\n----------------------------------------------------------------\n        Layer (type)               Output Shape         Param #\n================================================================\n            Conv2d-1            [-1, 6, 28, 28]             156\n              ReLU-2            [-1, 6, 28, 28]               0\n         MaxPool2d-3            [-1, 6, 14, 14]               0\n            Conv2d-4           [-1, 16, 10, 10]           2,416\n              ReLU-5           [-1, 16, 10, 10]               0\n         MaxPool2d-6             [-1, 16, 5, 5]               0\n           Flatten-7                  [-1, 400]               0\n            Linear-8                  [-1, 120]          48,120\n              ReLU-9                  [-1, 120]               0\n           Linear-10                   [-1, 84]          10,164\n             ReLU-11                   [-1, 84]               0\n           Linear-12                   [-1, 10]             850\n          Softmax-13                   [-1, 10]               0\n================================================================\nTotal params: 61,706\nTrainable params: 61,706\nNon-trainable params: 0\n----------------------------------------------------------------\nInput size (MB): 0.00\nForward/backward pass size (MB): 0.11\nParams size (MB): 0.24\nEstimated Total Size (MB): 0.35\n----------------------------------------------------------------\n```\n\n### 1.1.1 卷积运算\n\n在数学中，卷积的定义为：\n\n$$\n(f*g)(t) = \\int_{-\\infty}^{\\infty} f(t-\\tau)g(\\tau)d\\tau\n$$\n\n> 严格来说，卷积层是个错误的说法，因为它所表示的运算其实是**互相关运算**，而不是卷积运算。\n\n![](./计算机视觉深度学习入门/7.png)\n\n二维互相关运算：0 x 0 + 1 x 1 + 3 x 2 + 4 x 3 = 19\n\n所以，输出大小等于输入大小 $n_h \\times n_w$ 减去卷积核大小 $k_h \\times k_w$（边界效应），即：\n\n$$\n(n_h - k_h + 1) \\times (n_w - k_w + 1)\n$$\n\n**填充**：为了不让图像因为边缘效应经过深度网络层层越卷越小，通常会在图像边缘补零，即在图像边缘添加一些额外的像素，使得图像边缘的像素值与图像中心的像素值相等。\n\n> 卷积层当中也有偏置项，偏置项和卷积核内的参数都是需要训练的(~~下面要考~~)。\n\n### 1.1.2 图像卷积\n\nDense 层与卷积层的根本区别在于，Dense 层从输入特征空间中学到的是全局模式（比如对于 MNIST 数字，全局模式就是涉及所有像素的模式），而卷积层学到的是局部模式（对于图像来说，局部模式就是在输入图像的二维小窗口中发现的模式）。\n\n![](./计算机视觉深度学习入门/5.png)\n\n卷积网络的两个重要特性：\n\n- 卷积神经网络学到的模式具有**平移不变性**。\n- 卷积神经网络可以学到**模式的空间层次结构**(**局部性**)。\n\n![](./计算机视觉深度学习入门/6.png)\n\n在MNIST的实例中，第一个卷积层接收的**特征图**是(1,28,28)，并输出尺寸为(6,28,28)的特征图。这是为什么呢？\n\n```python\nself.conv1 = nn.Conv2d(in_channels=1, out_channels=6, kernel_size=5, stride=1, padding=2)\n```\n先分析一下这段代码的含义：\n\n- in_channels=1 表示输入图像的通道数为1\n- out_channels=6 表示输出图像的通道数为6\n- kernel_size=5 表示卷积核的大小为5x5\n- stride=1 表示卷积步长为1\n- padding=2 表示填充2个像素\n\n一共有6个卷积核，每个卷积核都要分别对输入图像卷积运算一次，所以输出图像的通道数为6。\n\n> 这就是**特征图**这一术语的含义：深度轴上每个维度都是一个特征(卷积核或叫滤波器filter)。\n\n因为卷积核大小为5x5，由于**边界效应**，输出的特征图的边框会比输入图像小2个像素。但是因为又在周围填充了2个像素，所以输出的特征图的大小还是原来的大小。\n\n所以输出尺寸为(6,28,28)。\n\n理解了图像卷积的过程，我们现在还可以看看为什么第一层卷积的参数量是156。\n\n- 卷积核数量为6，卷积核的尺寸为(1,5,5)，所以参数量为5x5x1x6=150。\n- 还有**偏置项**，偏置项的数量为6，所以参数量为6。\n- 所以一共为5x5x1x6+6=156。\n\n### 1.1.3 一个特殊的卷积核 1x1卷积\n\n1×1 卷积核丧失了影响高度和宽度的能力，但是它可以影响通道数。\n\n我们可以将 1×1 卷积层看作在每个像素位置应用的全连接层，以 $c_i$ 个输入值转换为 $c_o$ 个输出值。因为这仍然是一个卷积层，所以跨像素的权重是一致的。\n\n- 当以每像素为基础应用时，1×1 卷积层相当于全连接层。\n- 1×1 卷积层通常用于调整网络层的通道数量和控制模型复杂性。\n\n### 1.1.4 最大汇聚运算\n\n在上面那个卷积神经网络的例子中，你可能注意到每经过一次MaxPool2d层，输出图像的尺寸就会缩小一半。\n\n这就是汇聚层(有的地方也叫**池化层**)的作用：主动对特征图进行下采样。\n\n但是为什么一定要下采样，直接用原图，保留较大特征图不好吗？\n\n- 减少需要处理的特征图的元素个数，减少参数量，防止过拟合。\n- 让连续卷积层的观察窗口越来越大，从而引起空间滤波器的层次结构。\n\n```python\nself.pool1 = nn.MaxPool2d(kernel_size=2)\n```\n\n一个池化窗口为2的池化层。\n\n平均池化(Average Pooling)，最大池化(Max Pooling)都是池化层的一种。\n\n但是往往最大池化(Max Pooling)的效果更好，因为它能够保留更多的特征，特征的最大值能够保留更多的信息。\n\n![](./计算机视觉深度学习入门/4.png)\n\n### 1.1.3 详解LeNet-5\n\n看到这里，其实上面那个LeNet-5模型的结构已经很清晰了。\n\nLeNet-5是深度学习之父，Yann LeCun于1998年提出的最早的卷积神经网络，当时是用来解决手写体数字识别问题，其网络结构图如下所示，从LeNet-5开始，CNN就形成了若干个（卷积、池化）层+（用于特定任务的全连接层）的范式\n\n在经过层层卷积池化后，最后连接一个flatten层，将二维特征图拉平，形成一条直线，最后输入到特定的全连接神经网络中。\n\n```python\nself.flatten = nn.Flatten()\n```\n\n拉平后，先后输入120个神经元，84个神经元和10个神经元的密连接层中。\n\n```python\nself.fc1 = nn.Linear(in_features=16 * 5 * 5, out_features=120)\nself.fc2 = nn.Linear(in_features=120, out_features=84)\nself.fc3 = nn.Linear(in_features=84, out_features=num_classes)\n```\n\n最后用softmax函数，求出每个输出的权重。\n\n![](./计算机视觉深度学习入门/2.png)\n\n在RoboMaster中，FYT视觉组用的识别装甲板数字的模型就是基于LeNet5的。LeNet5模型结构简单，参数少，适合在嵌入式设备上运行。\n\n[【Minecraft】红石卷积神经网络——原理](https://www.bilibili.com/video/BV1wF411F7PU/?share_source=copy_web&vd_source=e4838a460d5e965db0426ab9bd050b56)\n\n## 1.2 AlexNet改变世界的神经网络\n\n在LeNet-5的年代，深度学习并没有受到机器学习研究者的重视，理由是深度学习需要大量的计算量，参数多，需要大量的数据集供于训练。2012年，Alex Krizhevsky，Ilya Sutskever和Yoshua Bengio提出了AlexNet，并在同年的ImageNet图像分类竞赛上以压倒性的优势夺得了冠军。AlexNet获得成功的关键是\n\n- ImageNet2012提供了大量的已标注数据集，使得大规模的网络有足够的数据进行学习\n- 利用CUDA技术，Alex Krizhevsky和Ilya Sutskever实现了可以在GPU硬件上运行的深度卷积神经网络，而神经网络这种基于矩阵运算的模型能够在GPU上快速运算，突破了深度网络训练的瓶颈。\n\n下图为LeNet-5（左）和AlexNet（右）的对比，AlexNet任然保留了N个卷积池化+全连接层的形式。\n\n![](./计算机视觉深度学习入门/3.png)\n\n## 1.3 \"猫狗大战\"——VGG16\n\n首先下载`Kaggle`数据集，[下载网址](https://www.kaggle.com/datasets/shaunthesheep/microsoft-catsvsdogs-dataset)，点击Download -> 点击Download as Zip。\n\n![](./计算机视觉深度学习入门/15.png)\n\n[博客链接](https://blog.csdn.net/m0_72845244/article/details/131965310?fromshare=blogdetail&sharetype=blogdetail&sharerId=131965310&sharerefer=PC&sharesource=m0_72845244&sharefrom=from_link)\n\nVGG16是2014年ImageNet图像分类竞赛的冠军，其结构如下图所示：\n\n![](./计算机视觉深度学习入门/8.png)\n\n就如 LeNet 和 AlexNet，卷积神经网络可以简化为的形式：\n\n$$\n\\text{神经网络} = N * (n * Conv + MaxPool) + DetectionHead\\text{(检测头)}\n$$\n\nVGG 网络就是这样，他们将 $(n * Conv + MaxPool)$ 作为一个基本模块（VGG 块），通过不同模块的拼接，设计了 VGG-16、VGG-19 等不同的网络，都取得了不错的效果。\n\n# 2. 计算机视觉深度学习进阶\n\n## 2.1 三项基本的计算机视觉任务\n\n### 2.1.1 图像分类\n\n为图像指定一个或多个标签。它既可以是单标签分类（一张图像只能属于一个类别，不属于其他类别），也可以是多标签分类（找出一张图像所属的所有类别）\n\n例如：识别一张图片是猫还是狗(二分类)、识别一张手写数字图片是数字几(多分类)、识别一张RM机器人车辆图片是什么兵种什么阵营(多分类多标签)。\n\n### 2.1.2 图像分割\n\n将图像“分割”或“划分”成不同的区域，每个区域通常对应一个类别\n\n![](./计算机视觉深度学习入门/1.png)\n\n### 2.1.3 目标检测\n\n在图像中感兴趣的目标(ROI)周围绘制矩形（称为边界框）并给出每个矩形对应的类别。\n\n例如，检测相机采样的照片帧中，RM机器人车辆在二维图片中的位置和机器人的种类。如YOLO算法。\n\n## 2.2 现代卷积神经网络的架构模式\n\n### 2.2.1 模型架构\n\n模型架构往往会决定成败。如果你选择了不合适的架构，那么模型可能会被次优指标拖累，再多的训练数据也无法改进它。相反，良好的模型架构可以加速学习过程，让模型可以有效利用训练数据，并降低对大型数据集的需求。一个良好的模型架构可以**减小搜索空间**，或者**更容易收敛到搜索空间的良好位置**。就像特征工程和数据收集一样，模型架构就是为了能够利用梯度下降**更轻松地解决问题**。\n\n模型架构更像是一门艺术，而不是一门科学。经验丰富的机器学习工程师能够在第一次尝试时就凭直觉拼凑出高性能的模型，而初学者往往很难构建出一个可用于训练的模型。这里的关键词是**直觉**：没人可以向你清楚地解释什么有效、什么无效。\n\n> 可解释性差，黑盒\n\n### 2.2.2 残差连接\n\n> 传话游戏：y = f4(f3(f2(f1(x))))\n\n如果函数链太长，那么这些噪声会盖过梯度信息，反向传播就会停止工作，模型也就根本无法训练。这就是**梯度消失（vanishing gradient）**问题。\n\n当人们发现深度卷积网络能有效从图片中提取特征时，人们就致力于设计更深更大的神经网络。但是人们发现，深层的神经网络往往难以训练，其中最主要的原因就是梯度消失（某一层的梯度≈0）和梯度爆炸（某一层的梯度≈无穷大）。曾经，人们认为像VGG-19这样的网络已经是网络深度的极限了，这样的网络足以被称为深度卷积神经网络，直到Kaiming He, Shaoqing Ren and Jian Sun带着他们的**ResNet**以难以置信的1202层、1940万参数（19.4M）炸裂登场。(中国人何恺明，他还发明了暗通道去雾算法)\n\n![](./计算机视觉深度学习入门/9.png)\n\n残差连接是一种常用的网络结构，它能够帮助深度神经网络更好地收敛，并减少梯度消失或爆炸的问题。残差连接的基本思想是，如果一个层的输出可以被其输入直接预测，那么就不要再加一层全连接层，而是直接将其输出作为下一层的输入。\n\n下图为resnet-18结构图\n\n<img src=\"./计算机视觉深度学习入门/11.png\" alt=\"resnet-18\" style=\"width:300px;\" />\n\n\n利用残差连接，你可以构建任意深度的神经网络，而无须担心梯度消失问题。\n\n### 2.2.3 批量规范化\n\n**规范化（normalization）**包含多种方法，旨在让机器学习模型看到的不同样本之间更加相似，这有助于模型学习，还有助于更好地泛化到新数据。\n\n虽然原始论文指出，批量规范化的作用是“减少内部协变量偏移”，但没有人能真正确定批量规范化为何有效。有各种假说，但没有确定的说法。你会发现，深度学习中的许多事情是这样的——深度学习不是一门精确的科学，而是一组不断变化、根据经验得出的最佳工程实践，其中夹杂着不可靠的表述。\n\n### 2.2.4 深度可分离卷积\n\n如果我告诉你，有一种层可以替代 Conv2D 层，并可以让模型变得更加轻量（可训练权重参数更少）、更加精简（浮点运算更少），还可以将模型性能提高几个百分点，你觉得怎么样？我说的正是 深度可分离卷积（depthwise separable convolution）层的作用（Keras 中的\nSeparableConv2D 层）。这种层对输入的每个通道分别进行空间卷积，然后通过逐点卷积（1×1 卷积）将输出通道混合。\n\n![](./计算机视觉深度学习入门/12.png)\n\n> 深度可分离卷积：深度卷积 + 逐点卷积\n\n与普通卷积相比，深度可分离卷积的参数更少，计算量也更小，同时具有相似的表示能力。它得到的是更小的模型，其收敛速度更快，更不容易出现过拟合。如果只用有限的数据从头开始训练一个小模型，这些优点就变得尤为重要。\n\n以GoogleNet为代表的深度神经网络架构，其卷积层都采用深度可分离卷积。\n\n1. Inception块\n\n   在GoogLeNet中，基本的卷积块被称为Inception块（Inception block）\n   ![](./计算机视觉深度学习入门/13.png)\n\n2. GoogLeNet\n    ![](./计算机视觉深度学习入门/14.png)\n  \n# 3. YOLOv5实战\n\n[yolov5-5.0训练完整步骤](https://blog.csdn.net/m0_72845244/article/details/131508466?fromshare=blogdetail&sharetype=blogdetail&sharerId=131508466&sharerefer=PC&sharesource=m0_72845244&sharefrom=from_link)\n\n# 4. 有关深度学习的社区\n\n- [Kaggle](https://www.kaggle.com/)\n- [HuggingFace](https://huggingface.co/)\n- [Modelscope](https://modelscope.io/)\n- [Github](https://github.com/)\n\n---\n\n# 作业\n\n## 1. 制作任意一种猫狗的二分类的网络（选做，可做可以不做）\n\n要求：\n\n- 自己创建一个小型数据集，训练集和验证集合起来最多2500张照片。\n- 使用数据增强，增强自己创建的小型数据集。\n- 在Gitee提交python源代码或ipynb文件，**训练结果曲线图**并制作**训练混淆矩阵**\n\n## 2. YOLO动手操练\n\nYOLO目标检测是每个RMer小白学习的必经之路，请同学们自学YOLOv5算法的部署，部署YOLOv5目标检测算法。\n\n要求：\n\n- 在自己电脑上配置好深度学习环境，要求使用**GPU推理**。\n- 使用官方模型权重\n- 在Gitee中提交随意一个推理视频\n\n截止日期：看群通知";
						const data = {title:"计算机视觉深度学习入门",published:new Date(1732665600000),draft:false,description:"",image:"./计算机视觉深度学习入门/8.png",tags:["深度学习"],category:"培训",lang:"",prevTitle:"",prevSlug:"",nextTitle:"",nextSlug:""};
						const _internal = {
							type: 'content',
							filePath: "F:/blog/cmcblog/src/content/posts/计算机视觉深度学习入门.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
