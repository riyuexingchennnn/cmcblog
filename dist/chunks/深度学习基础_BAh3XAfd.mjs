import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML, s as spreadAttributes } from './astro/server_C8YLoupj.mjs';
import { g as getImage } from './_astro_assets_BYJOHRE2.mjs';
import Astro__xOhJS from './1_CWNTMtJG.mjs';
import Astro__xSlVz from './2_iJed1AF4.mjs';
import Astro__ylPho from './9_T3xGxFZL.mjs';
import Astro__1UW4qS from './10_YdUNMIDN.mjs';
import Astro__xWq8g from './3_CYQL02O7.mjs';
import Astro__y1ujW from './4_BI1KIu4O.mjs';
import Astro__1V18Cz from './11_DA4vTcxI.mjs';
import Astro__1V5cOg from './12_Ciqh8_Gz.mjs';
import Astro__1V9h0W from './13_C8b3Xq3O.mjs';
import Astro__1XtFI3 from './27_B8A-DuCM.mjs';
import Astro__1XxJTJ from './28_XLYTG4qT.mjs';
import Astro__1XBO6q from './29_1wSvneI7.mjs';
import Astro__1VltA1 from './16_CNmBkSgU.mjs';
import Astro__1VdlcD from './14_DXJrQoMi.mjs';
import Astro__1Vhpok from './15_DUeXqFrc.mjs';
import Astro__1X1cne from './20_BdCaJ6Or.mjs';
import Astro__1X9kKB from './22_pKDU-zGz.mjs';
import Astro__1XdoWi from './23_CUc3yp3u.mjs';
import Astro__1Xht8Y from './24_sOz0v5EF.mjs';
import Astro__1X5gyU from './21_DaQV7QEu.mjs';
import Astro__1XlxkF from './25_ZMOqw3mC.mjs';
import Astro__1VpxLH from './17_KrzF3CEJ.mjs';
import Astro__1VxGa5 from './19_-KMGeFLW.mjs';
import Astro__1VtBXo from './18_DDNyOIV-.mjs';
import Astro__1XpBwm from './26_DW02Wkgy.mjs';
import Astro__y9CHk from './6_C2V-oAxw.mjs';
import Astro__yhL5H from './8_DPwW9z02.mjs';
import Astro__ydGT1 from './7_DguRfOyl.mjs';

const images = async function(html) {
					const imageSources = {};
					{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/1\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/1.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__xOhJS, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/2\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/2.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__xSlVz, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/9\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/9.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__ylPho, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/10\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/10.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1UW4qS, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/3\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/3.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__xWq8g, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/4\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/4.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__y1ujW, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/11\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/11.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1V18Cz, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/12\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/12.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1V5cOg, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/13\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/13.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1V9h0W, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/27\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/27.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1XtFI3, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/28\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/28.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1XxJTJ, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/29\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/29.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1XBO6q, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/16\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/16.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1VltA1, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/14\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/14.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1VdlcD, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/15\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/15.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1Vhpok, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/20\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/20.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1X1cne, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/22\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/22.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1X9kKB, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/23\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/23.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1XdoWi, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/24\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/24.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1Xht8Y, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/21\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/21.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1X5gyU, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/25\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/25.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1XlxkF, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/17\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/17.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1VpxLH, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/19\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/19.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1VxGa5, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/18\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/18.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1VtBXo, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/26\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/26.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__1XpBwm, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/6\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/6.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__y9CHk, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/8\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/8.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__yhL5H, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./深度学习基础/7\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./深度学习基础/7.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__ydGT1, ...props});
													occurrenceCounter++;
											}
									}
					return imageSources;
			};

			async function updateImageReferences(html) {
				return images(html).then((imageSources) => {
						return html.replaceAll(/__ASTRO_IMAGE_="([^"]+)"/gm, (full, imagePath) => {
								const decodedImagePath = JSON.parse(imagePath.replace(/&#x22;/g, '"'));
		
								// Use the 'index' property for each image occurrence
								const srcKey = decodedImagePath.src + '_' + decodedImagePath.index;
		
								if (imageSources[srcKey].srcSet && imageSources[srcKey].srcSet.values.length > 0) {
										imageSources[srcKey].attributes.srcset = imageSources[srcKey].srcSet.attribute;
								}
		
								const { index, ...attributesWithoutIndex } = imageSources[srcKey].attributes;
		
								return spreadAttributes({
										src: imageSources[srcKey].src,
										...attributesWithoutIndex,
								});
						});
				});
		}
		

		// NOTE: This causes a top-level await to appear in the user's code, which can break very easily due to a Rollup
	  // bug and certain adapters not supporting it correctly. See: https://github.com/rollup/rollup/issues/4708
	  // Tread carefully!
			const html = await updateImageReferences("<h1 id=\"前言\">前言<a class=\"anchor\" href=\"#前言\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h1>\n<p>FYT视觉组培训，针对RoboMaster的深度学习速成课。</p>\n<p>预备知识：</p>\n<ul>\n<li>学习完前面的C++培训知识，有基本的编程能力。</li>\n<li>掌握Python的基本语法。</li>\n</ul>\n<p>参考书籍：</p>\n<ul>\n<li>Deep Learning with Python Second Edition (主要讲tensorflow)</li>\n<li>DIVE INTO DEEP LEARNING (主要讲pytorch)</li>\n<li>了解CV与RoboMaster视觉组 (视觉组圣经)</li>\n</ul>\n<p>往年的深度学习文档：<a href=\"https://github.com/CSU-FYT-Vision/Vision-Tutorial\">https://github.com/CSU-FYT-Vision/Vision-Tutorial</a></p>\n<p>讲解人</p>\n<blockquote>\n<p>计科2205 蔡明辰</p>\n</blockquote>\n<hr>\n<h1 id=\"1-初识深度学习\">1. 初识深度学习<a class=\"anchor\" href=\"#1-初识深度学习\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h1>\n<h2 id=\"11-什么是深度学习\">1.1 什么是深度学习<a class=\"anchor\" href=\"#11-什么是深度学习\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>深度学习（Deep Learning）是<strong>机器学习</strong>的一种方法，它利用多层<strong>神经网络</strong>对数据进行学习，并通过<strong>反向传播</strong>算法进行<strong>梯度下降</strong>，从而使得神经网络能够自动学习到数据的特征，并对未知数据进行<strong>预测</strong>。</p>\n<h2 id=\"12-robomaster与深度学习\">1.2 RoboMaster与深度学习<a class=\"anchor\" href=\"#12-robomaster与深度学习\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>在RoboMaster中，有许多需要使用到深度学习的地方，如图像识别、目标检测等。</p>\n<ul>\n<li>装甲板检测：可以使用实时目标检测装甲板的位置，准确有效击打装甲板。</li>\n<li>装甲数字识别：使用一个简单的图像分类网络，识别数字。</li>\n<li>雷达：目标检测赛场上的各种敌我车辆，显示小地图，发动易伤buff。</li>\n</ul>\n<p>所以RMer视觉也要掌握深度学习的基本知识。</p>\n<h2 id=\"13-机器学习与深度学习\">1.3 机器学习与深度学习<a class=\"anchor\" href=\"#13-机器学习与深度学习\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<h3 id=\"131-机器学习\">1.3.1 机器学习<a class=\"anchor\" href=\"#131-机器学习\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<p>机器学习的主要任务是从数据中学习，并利用这些知识对未知数据进行预测或决策。机器学习的算法有<strong>监督学习</strong>、<strong>无监督学习</strong>、<strong>半监督学习</strong>、<strong>强化学习</strong>等。</p>\n<ul>\n<li>输入数据。机器学习的输入数据可以是图像、文本、声音、视频等。</li>\n<li>预期输出示例。机器学习的预期输出可以是分类、回归、聚类、排序等。</li>\n<li>衡量算法效果的方法。衡量结果是一种反馈信号，用于调整算法。这个调整的步骤就是我们说的<strong>学习</strong>。</li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/1.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>机器学习和深度学习的核心问题在于有意义地变换数据。换句话说，在于学习输入数据的有用表示——这种表示可以让数据更接近预期输出。</p>\n<p>了解了<strong>学习</strong>的概念后，看看深度学习的特别之处。</p>\n<h3 id=\"132-深度学习之深度\">1.3.2 深度学习之“深度”<a class=\"anchor\" href=\"#132-深度学习之深度\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<p>深度学习是机器学习的一个分支，它利用多层神经网络对数据进行学习。</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/2.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>可以将深度神经网络看做一个多级的<strong>信息蒸馏</strong>：信息穿过多层过滤器，其纯度越来越高。</p>\n<h2 id=\"14-机器学习算法\">1.4 机器学习算法<a class=\"anchor\" href=\"#14-机器学习算法\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<blockquote>\n<p>本小节了解即可。</p>\n</blockquote>\n<h3 id=\"141-监督学习\">1.4.1 监督学习<a class=\"anchor\" href=\"#141-监督学习\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<p><strong>监督学习</strong>擅长在“给定输入特征”的情况下预测标签。</p>\n<p>监督学习的学习过程一般可以分为三大步骤：</p>\n<ol>\n<li>\n<p>从已知大量数据样本中随机选取一个子集，为每个样本获取真实标签。有时，这些样本已有标签（例如，患者是否在下一年内康复？）；有时，这些样本可能需要被人工标记（例如，图像分类）。这些输入和相应的标签一起构成了训练数据集；</p>\n</li>\n<li>\n<p>选择有监督的学习算法，它将训练数据集作为输入，并输出一个“已完成学习的模型”；</p>\n</li>\n<li>\n<p>将之前没有见过的样本特征放到这个“已完成学习的模型”中（测试集），使用模型的输出作为相应标签的预测。</p>\n</li>\n</ol>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/9.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<ul>\n<li>\n<p><strong>回归</strong>问题：输出是数值类型</p>\n<p>举例：通过各种影响因素预测房价、预测用户对一部电影的评分可以被归类为一个回归问题</p>\n</li>\n<li>\n<p><strong>分类</strong>问题：输出是类别的分类问题的常见损失函数被称为 <strong>交叉熵</strong> （cross-entropy）</p>\n<p>举例：从手写数据集中区分0~9（类别问题）、以下图片是否是毒蘑菇（二分类问题）</p>\n</li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/10.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>模型通常给出的是一个概率：比如输入以上蘑菇，分类器可能输出0.8\n可以这样理解：分类器90%确定图像描绘的是一只猫</p>\n<h3 id=\"142-无监督学习\">1.4.2 无监督学习<a class=\"anchor\" href=\"#142-无监督学习\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<p>监督学习要向模型提供巨大数据集：每个样本包含特征和相应标签值。</p>\n<p>相反，如果工作没有十分具体的目标，就需要“自发”地去学习了。 比如，老板可能会给我们一大堆数据，然后要求用它做一些数据科学研究，却没有对结果有要求。 这类数据中不含有“目标”的机器学习问题通常被为 <strong>无监督学习</strong>（unsupervised learning）</p>\n<ul>\n<li>\n<p>聚类 （clustering）问题：没有标签的情况下，我们是否能给数据分类呢？比如，给定一组照片，我们能把它们分成风景照片、狗、婴儿、猫和山峰的照片吗？同样，给定一组用户的网页浏览记录，我们能否将具有相似行为的用户聚类呢？</p>\n</li>\n<li>\n<p>主成分分析 （principal component analysis）问题：我们能否找到少量的参数来准确地捕捉数据的线性相关属性？比如，一个球的运动轨迹可以用球的速度、直径和质量来描述。再比如，裁缝们已经开发出了一小部分参数，这些参数相当准确地描述了人体的形状，以适应衣服的需要。另一个例子：在欧几里得空间中是否存在一种（任意结构的）对象的表示，使其符号属性能够很好地匹配?这可以用来描述实体及其关系，例如“罗马” − “意大利” + “法国” = “巴黎”。</p>\n</li>\n<li>\n<p>因果关系 （causality）和 概率图模型 （probabilistic graphical models）问题：我们能否描述观察到的许多数据的根本原因？例如，如果我们有关于房价、污染、犯罪、地理位置、教育和工资的人口统计数据，我们能否简单地根据经验数据发现它们之间的关系？</p>\n</li>\n<li>\n<p>生成对抗性网络 （generative adversarial networks）：为我们提供一种合成数据的方法，甚至像图像和音频这样复杂的非结构化数据。潜在的统计机制是检查真实和虚假数据是否相同的测试，它是无监督学习的另一个重要而令人兴奋的领域。</p>\n</li>\n</ul>\n<h3 id=\"143-半监督学习\">1.4.3 半监督学习<a class=\"anchor\" href=\"#143-半监督学习\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<p>半监督学习（Semi-Supervised Learning, SSL）是一种介于监督学习和无监督学习之间的机器学习方法。它利用少量标注数据和大量未标注数据共同训练模型，目标是提高模型的性能，同时减少对标注数据的依赖。半监督学习方法在标注数据获取成本较高或数据标注较困难的场景中非常有用，例如医学影像分析、自然语言处理和计算机视觉等领域。</p>\n<ul>\n<li>标记样本少的类别：可以用聚类算法来标记样本少的类别。</li>\n<li>标记样本多的类别：可以用生成模型来标记样本多的类别。</li>\n</ul>\n<h3 id=\"144-强化学习\">1.4.4 强化学习<a class=\"anchor\" href=\"#144-强化学习\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<p>强化学习（Reinforcement Learning）是机器学习的一种方法，它通过与环境的互动来学习。</p>\n<p>强化学习的目标是产生一个好的 <strong>策略</strong> （policy）。</p>\n<p>模型根据对环境的观察产生一定的动作，将这个动作应用到环境当中，模型从环境中获得 <strong>奖励</strong></p>\n<p>举例：AlphaGo</p>\n<p><a href=\"https://www.bilibili.com/video/BV1xn4y1R7GQ/?share_source=copy_web&#x26;vd_source=e4838a460d5e965db0426ab9bd050b56\">本科毕设 非嵌入式离线强化学习制作皇室战争AI与8000分人机的获胜对局</a></p>\n<h2 id=\"14-用三张图理解深度学习的工作原理\">1.4 用三张图理解深度学习的工作原理<a class=\"anchor\" href=\"#14-用三张图理解深度学习的工作原理\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/3.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/4.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<h2 id=\"15-深度学习的硬件\">1.5 深度学习的硬件<a class=\"anchor\" href=\"#15-深度学习的硬件\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>CPU、GPU、TPU(张量处理器)</p>\n<p><a href=\"https://www.bilibili.com/video/BV1xE421j7Uv/?share_source=copy_web&#x26;vd_source=e4838a460d5e965db0426ab9bd050b56\">【硬核科普】从零开始认识显卡</a></p>\n<p>2007年，NVIDIA推出了CUDA，它是一种基于GPU的并行编程模型，可以让程序员编写并行代码，并在GPU上运行。</p>\n<h2 id=\"16-深度学习的历史与发展\">1.6 深度学习的历史与发展<a class=\"anchor\" href=\"#16-深度学习的历史与发展\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<h3 id=\"161-神经网络的核心关键原则\">1.6.1 神经网络的核心关键原则：<a class=\"anchor\" href=\"#161-神经网络的核心关键原则\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<ol>\n<li><strong>线性和非线性处理单元的交替</strong><br>\n通常称为层（layers）。</li>\n<li><strong>使用链式规则（也称为反向传播 Backpropagation）</strong><br>\n一次性调整网络中的全部参数。</li>\n</ol>\n<h3 id=\"162深度学习的提出历史\">1.6.2深度学习的提出历史：<a class=\"anchor\" href=\"#162深度学习的提出历史\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<ul>\n<li>一些中流砥柱的模型：\n<ul>\n<li>多层感知机（McCulloch and Pitts, 1943）</li>\n<li>卷积神经网络（LeCun et al., 1998）</li>\n<li>长短期记忆网络（Graves and Schmidhuber, 2005）</li>\n<li>Q学习（Watkins and Dayan, 1992）</li>\n</ul>\n</li>\n<li>曾因对休眠期和当时技术限制被搁置一段时间后，过去十年被重新发现。</li>\n</ul>\n<h3 id=\"163-为什么最近十几年深度学习才重新热门\">1.6.3 为什么最近十几年深度学习才重新“热门”？<a class=\"anchor\" href=\"#163-为什么最近十几年深度学习才重新热门\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<ol>\n<li><strong>网络和图像传感器的发展使得数据的获取变得廉价</strong>\n<ul>\n<li>大量图片、视频和用户数据信息使得大规模数据集变得触手可及。</li>\n</ul>\n</li>\n<li><strong>运算设备的算力发展</strong>\n<ul>\n<li>GPU的普及，使大规模算力唾手可得。</li>\n</ul>\n</li>\n<li><strong>深度学习框架在传播想法方面发挥了至关重要的作用</strong>\n<ul>\n<li>例如，PyTorch 和 TensorFlow。</li>\n<li>在2014年之前，对卡内基梅隆大学机器学习博士生来说，训练全性能回归模型曾是一个复杂的作业问题。而现在，这项任务只需不到10行代码即可完成。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2-神经网络的基本数学概念\">2. 神经网络的基本数学概念<a class=\"anchor\" href=\"#2-神经网络的基本数学概念\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h1>\n<h2 id=\"21-张量-tensor-介绍\">2.1 张量 (Tensor) 介绍<a class=\"anchor\" href=\"#21-张量-tensor-介绍\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>张量是多维数组的泛化，用于表示标量、向量、矩阵及更高维数据。</p>\n<ol>\n<li>\n<p><strong>标量 (Scalar)</strong><br>\n标量是零维张量，仅表示一个数值，例如：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">x </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> np.array(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">)  </span><span style=\"color:#6A737D\"># 标量</span></span>\n<span class=\"line\"></span></code></pre>\n</li>\n<li>\n<p><strong>向量 (Vector)</strong><br>\n向量是一维张量，例如：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">x </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> np.array([</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">])  </span><span style=\"color:#6A737D\"># 向量</span></span>\n<span class=\"line\"></span></code></pre>\n</li>\n<li>\n<p><strong>矩阵 (Matrix)</strong><br>\n矩阵是二维张量，例如：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">x </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> np.array([[</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">], [</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\">]])  </span><span style=\"color:#6A737D\"># 矩阵</span></span>\n<span class=\"line\"></span></code></pre>\n</li>\n<li>\n<p><strong>张量 (Tensor)</strong><br>\n张量是更高维度的数组</p>\n</li>\n</ol>\n<h2 id=\"22-张量运算的导数梯度-gradient\">2.2 张量运算的导数——梯度 (Gradient)<a class=\"anchor\" href=\"#22-张量运算的导数梯度-gradient\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>导数这一概念可以应用于任意函数，只要函数所对应的表面是连续且光滑的。张量运算（或张量函数）的导数叫作梯度（gradient）。梯度就是将导数这一概念推广到以张量为输入的函数，张量函数的梯度表示该函数所对应多维表面的曲率（curvature）。</p>\n<h2 id=\"23-链式求导chain-rule\">2.3 链式求导（Chain Rule）<a class=\"anchor\" href=\"#23-链式求导chain-rule\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>链式求导是神经网络梯度计算的核心工具，用于计算复合函数的导数。</p>\n<p>如果函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z = f(g(x))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span></span></span></span>，则导数计算为：</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>z</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>z</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>g</mi></mrow></mfrac><mo>⋅</mo><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>g</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial z}{\\partial x} = \\frac{\\partial z}{\\partial g} \\cdot \\frac{\\partial g}{\\partial x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.0574em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2519em;vertical-align:-0.8804em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0574em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<p>在神经网络中，每一层的输出是上一层的输入，链式求导用于将输出误差逐层反传以更新权重。</p>\n<h2 id=\"24-随机梯度下降-stochastic-gradient-descent\">2.4 随机梯度下降 (Stochastic Gradient Descent)<a class=\"anchor\" href=\"#24-随机梯度下降-stochastic-gradient-descent\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>给定一个可微函数，理论上可以用解析法找到它的最小值，找到所有导数为0的点，然后比较函数在其中哪个点的取值最小。将这一方法应用于神经网络，就是用解析法求出<strong>损失函数</strong>最小值对应的所有权重值。但在实际中，求解析解往往是不可行的。</p>\n<blockquote>\n<p>一个两个参数求解析解还好说，但是神经网络的参数不会少于几千个，而且经常有上千万个。</p>\n</blockquote>\n<p>SGD的步骤：</p>\n<ol>\n<li>抽取训练样本 x 和对应目标 y_true 组成的一个数据批量。</li>\n<li>在 x 上运行模型，得到预测值 y_pred。这一步叫作<strong>前向传播</strong>。</li>\n<li>计算模型在这批数据上的损失值，用于衡量 y_pred 和 y_true 之间的差距。</li>\n<li>计算损失相对于模型参数的梯度。这一步叫作<strong>反向传播</strong>（backward pass）。</li>\n<li>将参数沿着梯度的反方向移动一小步，比如 W -= learning_rate* gradient，从而使这批数据上的损失值减小一些。<strong>学习率</strong>（learning_rate）是一个调节梯度下降“速度”的标量因子。</li>\n</ol>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>⼀维损失函数曲线的随机梯度下降</th><th>⼆维损失表⾯的梯度下降</th></tr></thead><tbody><tr><td><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/11.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></td><td><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/12.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></td></tr></tbody></table>\n<p>如你所见，直观上来看，<code>learning_rate</code> 因子的取值很重要。如果取值太小，那么沿着曲线下降需要很多次迭代，而且可能会陷入局部极小点（鞍点）。如果取值过大，那么更新权重值之后可能会出现在曲线上完全随机的位置。</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/13.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<blockquote>\n<p>局部最⼩点的解决办法：动量。</p>\n<p>更新参数 w 不仅要考虑当前梯度值，还要考虑上⼀次参数更新。</p>\n<p>w(新) = w(旧) + momentum(动量因⼦) * velocity - learning_rate * gradient</p>\n</blockquote>\n<h2 id=\"25-反向传播-backpropagation\">2.5 反向传播 (Backpropagation)<a class=\"anchor\" href=\"#25-反向传播-backpropagation\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>反向传播是通过<strong>链式法则</strong>计算神经⽹络梯度的算法。</p>\n<p>反向传播的⼯作流程：</p>\n<ol>\n<li>前向传播：从输⼊层到输出层计算⽹络的预测值。</li>\n<li>损失计算：通过损失函数衡量预测值与真实值的误差。</li>\n<li>反向传播：利⽤链式求导从输出层逐层计算梯度。</li>\n<li>参数更新：使⽤优化器更新权重和偏置。</li>\n</ol>\n<h2 id=\"26-优化器-optimizer\">2.6 优化器 (Optimizer)<a class=\"anchor\" href=\"#26-优化器-optimizer\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>优化器是用于最小化损失函数的算法，通过梯度更新神经网络的参数。</p>\n<h3 id=\"常见优化器\">常见优化器<a class=\"anchor\" href=\"#常见优化器\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<ol>\n<li><strong>随机梯度下降 (SGD)</strong></li>\n</ol>\n<ul>\n<li>批量随机梯度下降，随机梯度下降，小批量随机梯度下降</li>\n</ul>\n<ol start=\"2\">\n<li><strong>AdaGrad</strong></li>\n</ol>\n<ul>\n<li>适合处理稀疏数据，但学习率可能逐渐变小。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>RMSProp</strong></li>\n</ol>\n<ul>\n<li>通过均方根调整学习率，适合非平稳目标。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>Adam</strong><br>\n综合了动量法和 RMSProp：</li>\n</ol>\n<h2 id=\"27-用计算图看正向传播和反向传播\">2.7 用计算图看正向传播和反向传播<a class=\"anchor\" href=\"#27-用计算图看正向传播和反向传播\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/27.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>前向传播的过程比较简单，从输入层开始，逐层计算每一层的输出，直到得到最终的预测值。</p>\n<p>“如果反过来看？”</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/28.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></td><td><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/29.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></td></tr></tbody></table>\n<p>对该图应用<strong>链式法则</strong>，可以计算出我们想要的梯度（损失函数相对于参数的梯度偏导）：</p>\n<ul>\n<li>grad(loss_val,w) = 1 x 1 x 2 = 2</li>\n<li>grad(loss_val,b) = 1 x 1 = 1</li>\n</ul>\n<p>然后，我们就可以用这些梯度来更新参数w和b了。</p>\n<h1 id=\"3-从线性回归到神经网络\">3. 从线性回归到神经网络<a class=\"anchor\" href=\"#3-从线性回归到神经网络\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h1>\n<h2 id=\"31-主要目的\">3.1 主要目的<a class=\"anchor\" href=\"#31-主要目的\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>学习如何⽤PyTorch编程。</p>\n<h2 id=\"32-任务目标\">3.2 任务目标<a class=\"anchor\" href=\"#32-任务目标\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>线性回归的式⼦满⾜：y = w*x + b，其中w和b均为参数，x，y可以理解成特征值和⽬标值，在程序中我们指定x，w，b，⽬标值y也随之确定了下来。然后将x通过神经⽹络进⾏训练，我们希望通过训练，使得随机初始化的参数w和b能够逼近⼀开始我们指定的w，b，使得预测值pred和实际的⽬标值y能够⽆限接近。</p>\n<h2 id=\"33-损失函数-loss-function\">3.3 损失函数 (Loss Function)<a class=\"anchor\" href=\"#33-损失函数-loss-function\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>损失函数⽤于衡量模型预测值与真实值的差距。通常我们会选择⾮负数作为损失，且数值越⼩表⽰损失越⼩，完美预测时的损失为0。回归问题中最常⽤的损失函数是平⽅误差函数。</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>l</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">w</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mrow><mo fence=\"true\">(</mo><msup><mover accent=\"true\"><mi>y</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">l^{(i)}(\\mathbf{w}, b) = \\frac{1}{2} \\left( \\hat{y}^{(i)} - y^{(i)} \\right)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">w</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.04em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6944em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1944em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.354em;\"><span style=\"top:-3.6029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>并不会带来本质上的区别，只是为了求导简单</p>\n</blockquote>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/16.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>我们需要计算在训练集n个样本上的损失均值：</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">w</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>l</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">w</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mrow><mo fence=\"true\">(</mo><msup><mi mathvariant=\"bold\">w</mi><mi mathvariant=\"normal\">⊤</mi></msup><msup><mi mathvariant=\"bold\">x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>+</mo><mi>b</mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">L(\\mathbf{w}, b) = \\frac{1}{n} \\sum_{i=1}^{n} l^{(i)}(\\mathbf{w}, b) = \\frac{1}{n} \\sum_{i=1}^{n} \\frac{1}{2}\n\\left( \\mathbf{w}^\\top \\mathbf{x}^{(i)} + b - y^{(i)} \\right)^2. </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">w</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">w</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathbf\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.354em;\"><span style=\"top:-3.6029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">.</span></span></span></span></span>\n<h2 id=\"34-代码实现\">3.4 代码实现<a class=\"anchor\" href=\"#34-代码实现\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> torch</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> torch.nn </span><span style=\"color:#F97583\">as</span><span style=\"color:#E1E4E8\"> nn</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> torch.optim </span><span style=\"color:#F97583\">as</span><span style=\"color:#E1E4E8\"> optim</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> matplotlib.pyplot </span><span style=\"color:#F97583\">as</span><span style=\"color:#E1E4E8\"> plt</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 1. 生成数据</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 创建一些模拟数据，假设 y = 3x + 2 + 噪声</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">torch.manual_seed(</span><span style=\"color:#79B8FF\">42</span><span style=\"color:#E1E4E8\">)  </span><span style=\"color:#6A737D\"># 设置随机种子</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">x </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> torch.linspace(</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">).unsqueeze(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">)  </span><span style=\"color:#6A737D\"># 输入数据 (100, 1)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">y </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> 3</span><span style=\"color:#F97583\"> *</span><span style=\"color:#E1E4E8\"> x </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> 2</span><span style=\"color:#F97583\"> +</span><span style=\"color:#E1E4E8\"> torch.randn(</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\"> 2</span><span style=\"color:#6A737D\">  # 输出数据带噪声 (100, 1)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 2. 定义一个简单的线性回归模型</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> LinearRegressionModel</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">nn</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Module</span><span style=\"color:#E1E4E8\">):</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    def</span><span style=\"color:#79B8FF\"> __init__</span><span style=\"color:#E1E4E8\">(self):</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">        super</span><span style=\"color:#E1E4E8\">(LinearRegressionModel, </span><span style=\"color:#79B8FF\">self</span><span style=\"color:#E1E4E8\">).</span><span style=\"color:#79B8FF\">__init__</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">        self</span><span style=\"color:#E1E4E8\">.linear </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> nn.Linear(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">)  </span><span style=\"color:#6A737D\"># 输入特征维度1，输出特征维度1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">    def</span><span style=\"color:#B392F0\"> forward</span><span style=\"color:#E1E4E8\">(self, x):</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        return</span><span style=\"color:#79B8FF\"> self</span><span style=\"color:#E1E4E8\">.linear(x)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">model </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> LinearRegressionModel()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 3. 定义损失函数和优化器</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">criterion </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> nn.MSELoss()  </span><span style=\"color:#6A737D\"># 均方误差损失</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">optimizer </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> optim.SGD(model.parameters(), </span><span style=\"color:#FFAB70\">lr</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">0.01</span><span style=\"color:#E1E4E8\">)  </span><span style=\"color:#6A737D\"># 随机梯度下降优化器</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 4. 训练模型</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">epochs </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> 100</span><span style=\"color:#6A737D\">  # 迭代次数</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">losses </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> []  </span><span style=\"color:#6A737D\"># 记录损失</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> epoch </span><span style=\"color:#F97583\">in</span><span style=\"color:#79B8FF\"> range</span><span style=\"color:#E1E4E8\">(epochs):</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    model.train()  </span><span style=\"color:#6A737D\"># 设置为训练模式</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    optimizer.zero_grad()  </span><span style=\"color:#6A737D\"># 清空梯度</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    predictions </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> model(x)  </span><span style=\"color:#6A737D\"># 模型预测</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    loss </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> criterion(predictions, y)  </span><span style=\"color:#6A737D\"># 计算损失</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    loss.backward()  </span><span style=\"color:#6A737D\"># 反向传播计算梯度</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    optimizer.step()  </span><span style=\"color:#6A737D\"># 更新模型参数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    losses.append(loss.item())  </span><span style=\"color:#6A737D\"># 记录损失</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    # 每100次输出一次训练信息</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> (epoch </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> 1</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">%</span><span style=\"color:#79B8FF\"> 10</span><span style=\"color:#F97583\"> ==</span><span style=\"color:#79B8FF\"> 0</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">        print</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"Epoch </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">epoch</span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\">1}</span><span style=\"color:#9ECBFF\">/</span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">epochs</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">, Loss: </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">loss.item()</span><span style=\"color:#F97583\">:.4f</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 5. 可视化训练结果</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 绘制损失曲线</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.figure(</span><span style=\"color:#FFAB70\">figsize</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">))</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.plot(</span><span style=\"color:#79B8FF\">range</span><span style=\"color:#E1E4E8\">(epochs), losses)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.title(</span><span style=\"color:#9ECBFF\">\"Loss Curve\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.xlabel(</span><span style=\"color:#9ECBFF\">\"Epochs\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.ylabel(</span><span style=\"color:#9ECBFF\">\"MSE Loss\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.show()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 绘制预测结果</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">model.eval()  </span><span style=\"color:#6A737D\"># 设置为评估模式</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">with</span><span style=\"color:#E1E4E8\"> torch.no_grad():</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    predicted </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> model(x)  </span><span style=\"color:#6A737D\"># 模型预测</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.figure(</span><span style=\"color:#FFAB70\">figsize</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">))</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.scatter(x.numpy(), y.numpy(), </span><span style=\"color:#FFAB70\">label</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"Ground Truth\"</span><span style=\"color:#E1E4E8\">)  </span><span style=\"color:#6A737D\"># 原始数据</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.plot(x.numpy(), predicted.numpy(), </span><span style=\"color:#FFAB70\">color</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"red\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">label</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"Predicted\"</span><span style=\"color:#E1E4E8\">)  </span><span style=\"color:#6A737D\"># 预测结果</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.legend()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.title(</span><span style=\"color:#9ECBFF\">\"Linear Regression Result\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">plt.show()</span></span>\n<span class=\"line\"></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/14.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></th><th><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/15.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></th></tr></thead><tbody><tr><td>损失曲线</td><td>预测结果</td></tr></tbody></table>\n<p>学习链接：<a href=\"https://blog.csdn.net/Delusional/article/details/113097030?fromshare=blogdetail&#x26;sharetype=blogdetail&#x26;sharerId=113097030&#x26;sharerefer=PC&#x26;sharesource=m0_72845244&#x26;sharefrom=from_link\">详解使⽤pytorch实现线性回归</a></p>\n<h1 id=\"4-机器学习基础知识\">4. 机器学习基础知识<a class=\"anchor\" href=\"#4-机器学习基础知识\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h1>\n<h2 id=\"41-机器学习的目标\">4.1 机器学习的目标<a class=\"anchor\" href=\"#41-机器学习的目标\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>泛化：模型在未见过的数据上的表现。</p>\n<h3 id=\"411-拟合和过拟合\">4.1.1 ⽋拟合和过拟合<a class=\"anchor\" href=\"#411-拟合和过拟合\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<blockquote>\n<p>根据泛化的定义，我们希望模型在我们没有训练过的数据上也取得很好的效果，⽽不是只在训练集上有很好的效果。</p>\n</blockquote>\n<ul>\n<li>\n<p>欠拟合：模型在训练集和测试集上表现都很差。</p>\n</li>\n<li>\n<p>过拟合：模型在训练集上表现很好，但在测试集上表现很差。</p>\n</li>\n</ul>\n<p>其实很好理解，训练开始时，模型还没有对训练数据中的所有相关模式建模。因此，模型在训练集和测试集上的表现都很差，这就是欠拟合。</p>\n<p>训练到一定程度后，模型开始仅学习和训练数据有关的模式，并且开始学习训练数据中的噪声和细节，但对新数据而言，这些噪声和细节是不相关的。这就是过拟合。</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/20.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<h3 id=\"412-嘈杂的训练数据\">4.1.2 嘈杂的训练数据<a class=\"anchor\" href=\"#412-嘈杂的训练数据\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<p>MNIST数据集中就有很多异常值。</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/22.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></td><td><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/23.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></td></tr></tbody></table>\n<p>如果模型将这些异常值(噪声)全部考虑进去，那么它的泛化性能将会下降</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/24.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>左边是稳健拟合，右边是过拟合</p>\n<h2 id=\"42-评估机器学习的性能\">4.2 评估机器学习的性能<a class=\"anchor\" href=\"#42-评估机器学习的性能\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<blockquote>\n<p>优化和泛化之间的矛盾，欠拟合和过拟合之间的矛盾</p>\n</blockquote>\n<h3 id=\"421-训练集验证集和测试集\">4.2.1 训练集、验证集和测试集<a class=\"anchor\" href=\"#421-训练集验证集和测试集\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<ol>\n<li>简单的留出验证\n<ul>\n<li>一般验证集占数据集的20%</li>\n</ul>\n</li>\n<li>K折交叉验证\n<ul>\n<li>有时候验证集很少，无法在统计学上代表数据\n<img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/21.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"422-评估模型的注意事项\">4.2.2 评估模型的注意事项<a class=\"anchor\" href=\"#422-评估模型的注意事项\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<ul>\n<li>数据的代表性</li>\n<li>数据冗余</li>\n</ul>\n<h2 id=\"43-改进模型拟合\">4.3 改进模型拟合<a class=\"anchor\" href=\"#43-改进模型拟合\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<ol>\n<li>\n<p>调节关键梯度下降参数</p>\n<ul>\n<li>学习率</li>\n<li>批量大小</li>\n</ul>\n</li>\n<li>\n<p>利用更好的模型架构</p>\n</li>\n<li>\n<p>提高模型的容量(大小)</p>\n</li>\n</ol>\n<h2 id=\"44-提高模型的泛化能力\">4.4 提高模型的泛化能力<a class=\"anchor\" href=\"#44-提高模型的泛化能力\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<ol>\n<li>数据集管理</li>\n<li>提前终止，防止过拟合</li>\n<li>模型正则化\n<ul>\n<li>缩减模型容量</li>\n<li>权重正则化</li>\n<li>Dropout\n<img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/25.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"5-多层感知机mlp从入门到实践\">5. 多层感知机（MLP）从入门到实践<a class=\"anchor\" href=\"#5-多层感知机mlp从入门到实践\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h1>\n<p>在上⾯的线性神经⽹络中我们了解很多深度学习的概念，那现在我们要深⼊对于深度神经⽹络的探索。</p>\n<h2 id=\"51-隐藏层-hidden-layer\">5.1 隐藏层 (Hidden Layer)<a class=\"anchor\" href=\"#51-隐藏层-hidden-layer\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<blockquote>\n<p>隐藏层是神经⽹络的核⼼，它可以帮助我们学习⾮线性关系。</p>\n</blockquote>\n<p>在线性⽹络中我们描述了仿射变换，这在深度学习种是⼀种线性变换，如果我们的输⼊输出满⾜线性关系，那么这样就⾜够了，但是线性是⼀个很强的假设；线性模型是很容易出错的，因为我们⽆法保证线性相关的关系。</p>\n<p>举例：</p>\n<ol>\n<li>\n<p>我们尝试预测⼀个⼈是否会还贷，我们可以认为，在其他条件不变的情况下，收⼊较⾼的申请⼈⽐收⼊较低的申请⼈更有可能偿还贷款。但是，虽然收⼊与还款概率存在单调性，但它们不是线性相关的。收⼊从0增加到5万，可能⽐从100万增加到105万带来更⼤的还款可能性。</p>\n</li>\n<li>\n<p>我们想要根据体温预测死亡率。 对体温⾼于37摄⽒度的⼈来说，温度越⾼⻛险越⼤。然⽽，对体温低于37摄⽒度的⼈来说，温度越⾼⻛险就越低。</p>\n</li>\n</ol>\n<p>我们可以通过在⽹络中加⼊⼀个或多个隐藏层来克服线性模型的限制，使其能处理更普遍的函数关系类型。最简单的⽅法就是将多个全连接层连接到⼀起，这种架构通常称为多层感知机（multilayer perceptron），通常缩写为 <strong>MLP</strong>。</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/17.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<ul>\n<li>这是⼀个两层的⽹络</li>\n<li>对于这种输入和输出的每个节点都相连的层，我们一般称为<strong>全连接层</strong>或<strong>稠密层</strong></li>\n<li>全连接层的开销⾮常⼤，需要权衡性能和参数规模</li>\n</ul>\n<p>仿射变换=权重*参数+偏置</p>\n<blockquote>\n<p>仿射变换的组合还是仿射变换</p>\n</blockquote>\n<p>那么这个模型还是线性的，依然没有解决上述线性模型表达能⼒弱的问题，我们需要有⼀个函数使他变成⾮线性的：<strong>激活函数</strong></p>\n<p>如果没有激活函数，那么每个隐藏层仅仅只是⼀个仿射函数，与线性模型并⽆区别，为了避免多层感知机模型退化成线性模型，我们需要引⼊激活函数。</p>\n<h2 id=\"52-激活函数-activation-function\">5.2 激活函数 (Activation Function)<a class=\"anchor\" href=\"#52-激活函数-activation-function\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>激活函数引⼊⾮线性特性，使神经⽹络能够拟合复杂的函数。</p>\n<h3 id=\"常见激活函数\">常见激活函数<a class=\"anchor\" href=\"#常见激活函数\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<ol>\n<li>Sigmoid</li>\n</ol>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sigma(x) = \\frac{1}{1 + e^{-x}} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0908em;vertical-align:-0.7693em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6973em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<ul>\n<li>将输出映射到 (0, 1)，适⽤于概率预测。</li>\n<li>容易引发梯度消失问题。</li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/19.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<ol>\n<li>Tanh</li>\n</ol>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>tanh</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">tanh</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2177em;vertical-align:-0.7693em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4483em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5904em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6973em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<ol>\n<li>ReLU (Rectified Linear Unit)</li>\n</ol>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>ReLU</mtext><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{ReLU}(x) = \\max(0, x) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">ReLU</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></span>\n<ul>\n<li>当输⼊为负时，ReLU函数的导数为0，⽽当输⼊为正时，ReLU函数的导数为1。</li>\n<li>注意，当输⼊值精确等于0时，ReLU函数不可导。在此时，我们默认使⽤左侧的导数，即当输⼊为0时,导数为0。但我们可以忽略这个问题，在⼯程实际中，⼏乎是永远不可能为0的。</li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/18.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<ol>\n<li>Softmax</li>\n</ol>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>Softmax</mtext><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><msup><mi>e</mi><msub><mi>x</mi><mi>i</mi></msub></msup><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>e</mi><msub><mi>x</mi><mi>j</mi></msub></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\text{Softmax}(x_i) = \\frac{e^{x_i}}{\\sum_{j=1}^n e^{x_j}} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Softmax</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4715em;vertical-align:-1.1301em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3414em;\"><span style=\"top:-2.3057em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6065em;\"><span style=\"top:-3.0051em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2819em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1301em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<ul>\n<li>⽤于多分类任务，将输出转化为概率分布。</li>\n</ul>\n<h2 id=\"53-softmax分类\">5.3 softmax分类<a class=\"anchor\" href=\"#53-softmax分类\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>softmax分类器是多分类问题中常用的分类器，它将输入的特征映射到一个概率分布，使得每个类别的概率之和为1。</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/26.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>现在经过上面三个公式（等于是三个单独的线性回归）的计算，我们已经得到了三个数；为了得到最后预测结果是啥，我们选择最大概率的标签为预测结果。</p>\n<p>假设输出为0.1，0.8，0.1，那么我们预测的类别就是2</p>\n<h2 id=\"54-mlp实战mnist写数字识别\">5.4 MLP实战——MNIST⼿写数字识别<a class=\"anchor\" href=\"#54-mlp实战mnist写数字识别\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>MNIST数据集包含60,000个训练样本和10,000个测试样本，每个样本是一个28x28像素的灰度图像，表示一个手写数字（0-9）。目标是训练一个模型，能够准确地识别这些手写数字。</p>\n<p>CSDN博客：<a href=\"https://blog.csdn.net/m0_72845244/article/details/131730803?fromshare=blogdetail&#x26;sharetype=blogdetail&#x26;sharerId=131730803&#x26;sharerefer=PC&#x26;sharesource=m0_72845244&#x26;sharefrom=from_link\">keras⼊⻔实例(MNIST数字分类)</a></p>\n<h3 id=\"pytorch加载数据集\">Pytorch加载数据集<a class=\"anchor\" href=\"#pytorch加载数据集\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> torch</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> torchvision </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> datasets, transforms</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 数据预处理</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">transform </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> transforms.Compose([</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    transforms.ToTensor(),  </span><span style=\"color:#6A737D\"># 转为 PyTorch 的 Tensor 格式</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    transforms.Normalize((</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">,), (</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">,))  </span><span style=\"color:#6A737D\"># 对数据进行归一化，均值和标准差为 0.5</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 加载训练集和测试集</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">train_dataset </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> datasets.MNIST(</span><span style=\"color:#FFAB70\">root</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'./data'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">train</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">True</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">transform</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">transform, </span><span style=\"color:#FFAB70\">download</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">True</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">test_dataset </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> datasets.MNIST(</span><span style=\"color:#FFAB70\">root</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'./data'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">train</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">False</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">transform</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">transform, </span><span style=\"color:#FFAB70\">download</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">True</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 数据加载器</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">train_loader </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> torch.utils.data.DataLoader(</span><span style=\"color:#FFAB70\">dataset</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">train_dataset, </span><span style=\"color:#FFAB70\">batch_size</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">64</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">shuffle</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">True</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">test_loader </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> torch.utils.data.DataLoader(</span><span style=\"color:#FFAB70\">dataset</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">test_dataset, </span><span style=\"color:#FFAB70\">batch_size</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">64</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">shuffle</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">False</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">print</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"训练集样本数: </span><span style=\"color:#79B8FF\">{len</span><span style=\"color:#E1E4E8\">(train_dataset)</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">print</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"测试集样本数: </span><span style=\"color:#79B8FF\">{len</span><span style=\"color:#E1E4E8\">(test_dataset)</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://www.bilibili.com/video/BV1Rz4y1h7nN/?share_source=copy_web&#x26;vd_source=e4838a460d5e965db0426ab9bd050b56\">神经网络可视化</a></p>\n<h1 id=\"5-linux下配置深度学习环境\">5. Linux下配置深度学习环境<a class=\"anchor\" href=\"#5-linux下配置深度学习环境\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h1>\n<h2 id=\"51-安装显卡驱动\">5.1 安装显卡驱动<a class=\"anchor\" href=\"#51-安装显卡驱动\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>强烈建议通过ubuntu22.04的官⽅GUI软件 <strong>软件和更新</strong> 安装显卡驱动。(Linux官⽅把nvidia驱动已经做的相当好了，安装起来也很⽅便。但是NVIDIA驱动其实还会有各式各样的BUG，包括Linux之⽗Linus Torvalds曾经说过的那样：“NVIDIA是最难伺候的硬件制造商，也是我们接触过最糟糕的公司，没有之⼀，<del>SO NVIDIA FUCKNVIDIA YOU</del>”.)</p>\n<p>图标⻓这样(有时候它是灰⾊的), <img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/6.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>安装成功后在终端使⽤<code>nvidia-smi</code>可以看到GPU信息，看到就算安装成功</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">nvidia-smi</span></span>\n<span class=\"line\"></span></code></pre>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/8.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>这⾥显⽰的CUDA版本是最⾼⽀持版本，安装个⽐这低的就⾏(但是也不能太低，下⾯会讲)。</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/7.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>如果想要更改显卡驱动，也可以在这⾥改。</p>\n<blockquote>\n<p>显卡驱动安装需要谨慎对待，尽量安装recommend版本，否则可能会导致ubuntu桌⾯不显⽰、开机不了、电脑副屏幕不显⽰等问题。</p>\n</blockquote>\n<blockquote>\n<p>装错显卡驱动时，不到万不得已，不要使⽤<code>sudo apt autoremove</code>，这是下下策。</p>\n</blockquote>\n<h2 id=\"52-安装cuda\">5.2 安装CUDA<a class=\"anchor\" href=\"#52-安装cuda\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>显卡驱动版本和CUDA版本有⼀定的对应关系。</p>\n<p>CUDA版本：<a href=\"https://developer.nvidia.com/cuda-toolkit-archive\">CUDA Toolkit Archive</a></p>\n<p>CUDA版本和驱动版本的对应关系可以看: <a href=\"https://sundaygeek.blog.csdn.net/article/details/86695400?fromshare=blogdetail&#x26;sharetype=blogdetail&#x26;sharerId=86695400&#x26;sharerefer=PC&#x26;sharesource=m0_72845244&#x26;sharefrom=from_link\">不同版本cuda对应的NVIDIA驱动版本</a></p>\n<blockquote>\n<p>但是CUDA版本也不⼀定是越新越好，某些较新的CUDA版本可能没有pytorch的适配版本，所以安装时要注意。(这其实是配环境很常⻅的事情，不同软件由不同公司⼚家开发，进度各有快慢，版本兼容性也不⼀样，所以需要注意。)</p>\n</blockquote>\n<p><strong>不要下载deb格式的，下载runfile！！！！</strong></p>\n<p>Cuda的⼀个安装教程： <a href=\"https://yinguobing.com/install-cuda11-with-runfile/\">https://yinguobing.com/install-cuda11-with-runfile/</a></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">nvcc</span><span style=\"color:#79B8FF\"> -V</span></span>\n<span class=\"line\"></span></code></pre>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./深度学习基础/8.png&#x22;,&#x22;alt&#x22;:&#x22;&#x22;,&#x22;index&#x22;:1}\"></p>\n<p>如果显⽰了这个代表安装成功。这⾥显⽰的CUDA版本是11.5，同学们也可以下载这个版本的CUDA。</p>\n<h2 id=\"53-安装python环境\">5.3 安装Python环境<a class=\"anchor\" href=\"#53-安装python环境\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>我们要使⽤pip⼯具安装深度学习的⼀些包，有numpy、tensorflow、keras、pytorch等</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> numpy</span><span style=\"color:#9ECBFF\"> tensorflow</span><span style=\"color:#9ECBFF\"> keras</span><span style=\"color:#9ECBFF\"> torch</span><span style=\"color:#9ECBFF\"> torchvision</span><span style=\"color:#79B8FF\"> -i</span><span style=\"color:#9ECBFF\"> https://pypi.tuna.tsinghua.edu.cn/simple</span></span>\n<span class=\"line\"></span></code></pre>\n<p>后⾯的 <a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\">https://pypi.tuna.tsinghua.edu.cn/simple</a> 是清华⼤学的镜像源地址，下载速度⽐较快。</p>\n<p>如果不想安装tensorflow，可以只安装pytorch。把 tensorflow keras 去掉。</p>\n<blockquote>\n<p>这⾥的安装命令是安装最新版本适配你电脑python环境的包，如果想安装特定版本的包，可以加上版本号。</p>\n</blockquote>\n<blockquote>\n<p>如果发现还是下载不了，也可以在官⽹上找到你想要torch和torchvision的版本，然后⼿动下载安装。</p>\n</blockquote>\n<p>官⽹下载：<a href=\"https://download.pytorch.org/whl/torch_stable.html\">torch版本⼤全</a></p>\n<p>然后使⽤pip安装。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#79B8FF\"> *</span><span style=\"color:#9ECBFF\">.whl</span></span>\n<span class=\"line\"></span></code></pre>\n<p>最后，检查⼀下pytorch是否安装成功。是否能使⽤cuda。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">python</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">import</span><span style=\"color:#9ECBFF\"> torch</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">torch.cuda.is_available</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"></span></code></pre>\n<p>如果能输出True，那么恭喜你安装成功。</p>\n<h2 id=\"54-安装anaconda\">5.4 安装Anaconda<a class=\"anchor\" href=\"#54-安装anaconda\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h2>\n<p>Anaconda是⼀个python包管理虚拟环境（可装可不装，不过还是建议装上）</p>\n<p>官⽹： <a href=\"https://zhuanlan.zhihu.com/p/459607806\">https://zhuanlan.zhihu.com/p/459607806</a></p>\n<p>可以参考的国内教程： <a href=\"https://zhuanlan.zhihu.com/p/459607806\">https://zhuanlan.zhihu.com/p/459607806</a></p>\n<p>官⽹安装教程： <a href=\"https://docs.anaconda.com/free/anaconda/install/linux/\">https://docs.anaconda.com/free/anaconda/install/linux/</a></p>\n<p>因为ubuntu22.04默认安装了python3.10.7，正常就是ROS2 Humble需要的python版本，所以可以直接使⽤本机的python版本。</p>\n<blockquote>\n<p>如果有需要使⽤某些Qt程序，⽐如PyQt5，可能需要利⽤Anacoda安装python的3.9版本才能使⽤Qt。正常使⽤时来回切换python版本即可。</p>\n</blockquote>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">conda</span><span style=\"color:#9ECBFF\"> create</span><span style=\"color:#79B8FF\"> -n</span><span style=\"color:#9ECBFF\"> XXX</span><span style=\"color:#9ECBFF\"> python=</span><span style=\"color:#79B8FF\">3.9</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">conda</span><span style=\"color:#9ECBFF\"> activate</span><span style=\"color:#9ECBFF\"> XXX</span><span style=\"color:#6A737D\"> # 进入虚拟环境</span></span>\n<span class=\"line\"></span></code></pre>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">conda</span><span style=\"color:#9ECBFF\"> deactivate</span><span style=\"color:#6A737D\"> # 退出虚拟环境</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>如果配置有困难的同学可以先使⽤<code>Google Colab</code>进⾏深度学习实验。但是配环境是每⼀个RoboMaster\n视觉组新⼿⼩⽩都需要的基本能⼒，建议⼤家都掌握。</p>\n</blockquote>\n<hr>\n<h1 id=\"作业\">作业<a class=\"anchor\" href=\"#作业\"><span class=\"anchor-icon\" data-pagefind-ignore=\"\">#</span></a></h1>\n<p>重新实现课上的MNIST⼿写数字识别分类的例子。</p>\n<p>要求：</p>\n<ol>\n<li>使用PyTorch实现。</li>\n<li>要求使用<strong>多层感知机MLP</strong>模型。</li>\n<li>在Gitee中提交python代码或或ipynb文件和训练结果(曲线图)。</li>\n</ol>\n<p>截止日期：看群通知。</p>");
	

				const frontmatter = {"title":"深度学习基础","published":"2024-11-27T00:00:00.000Z","description":"","image":"./深度学习基础/17.png","tags":["深度学习"],"category":"培训","draft":false,"lang":"","minutes":34,"words":6809,"excerpt":"FYT视觉组培训，针对RoboMaster的深度学习速成课。"};
				const file = "F:/blog/cmcblog/src/content/posts/深度学习基础.md";
				const url = undefined;
				function rawContent() {
					return "# 前言\n\nFYT视觉组培训，针对RoboMaster的深度学习速成课。\n\n预备知识：\n\n- 学习完前面的C++培训知识，有基本的编程能力。\n- 掌握Python的基本语法。\n\n参考书籍：\n\n- Deep Learning with Python Second Edition (主要讲tensorflow)\n- DIVE INTO DEEP LEARNING (主要讲pytorch)\n- 了解CV与RoboMaster视觉组 (视觉组圣经)\n\n往年的深度学习文档：https://github.com/CSU-FYT-Vision/Vision-Tutorial\n\n讲解人\n\n> 计科2205 蔡明辰\n\n---\n\n# 1. 初识深度学习\n\n## 1.1 什么是深度学习\n\n深度学习（Deep Learning）是**机器学习**的一种方法，它利用多层**神经网络**对数据进行学习，并通过**反向传播**算法进行**梯度下降**，从而使得神经网络能够自动学习到数据的特征，并对未知数据进行**预测**。\n\n## 1.2 RoboMaster与深度学习\n\n在RoboMaster中，有许多需要使用到深度学习的地方，如图像识别、目标检测等。\n\n- 装甲板检测：可以使用实时目标检测装甲板的位置，准确有效击打装甲板。\n- 装甲数字识别：使用一个简单的图像分类网络，识别数字。\n- 雷达：目标检测赛场上的各种敌我车辆，显示小地图，发动易伤buff。\n\n所以RMer视觉也要掌握深度学习的基本知识。\n\n## 1.3 机器学习与深度学习\n\n### 1.3.1 机器学习\n\n机器学习的主要任务是从数据中学习，并利用这些知识对未知数据进行预测或决策。机器学习的算法有**监督学习**、**无监督学习**、**半监督学习**、**强化学习**等。\n\n- 输入数据。机器学习的输入数据可以是图像、文本、声音、视频等。\n- 预期输出示例。机器学习的预期输出可以是分类、回归、聚类、排序等。\n- 衡量算法效果的方法。衡量结果是一种反馈信号，用于调整算法。这个调整的步骤就是我们说的**学习**。\n  \n![](./深度学习基础/1.png)\n\n机器学习和深度学习的核心问题在于有意义地变换数据。换句话说，在于学习输入数据的有用表示——这种表示可以让数据更接近预期输出。\n\n了解了**学习**的概念后，看看深度学习的特别之处。\n\n### 1.3.2 深度学习之“深度”\n\n深度学习是机器学习的一个分支，它利用多层神经网络对数据进行学习。\n\n![](./深度学习基础/2.png)\n\n可以将深度神经网络看做一个多级的**信息蒸馏**：信息穿过多层过滤器，其纯度越来越高。\n\n## 1.4 机器学习算法\n\n> 本小节了解即可。\n\n### 1.4.1 监督学习   \n\n**监督学习**擅长在“给定输入特征”的情况下预测标签。\n\n监督学习的学习过程一般可以分为三大步骤：\n\n1. 从已知大量数据样本中随机选取一个子集，为每个样本获取真实标签。有时，这些样本已有标签（例如，患者是否在下一年内康复？）；有时，这些样本可能需要被人工标记（例如，图像分类）。这些输入和相应的标签一起构成了训练数据集；\n   \n2. 选择有监督的学习算法，它将训练数据集作为输入，并输出一个“已完成学习的模型”；\n   \n3. 将之前没有见过的样本特征放到这个“已完成学习的模型”中（测试集），使用模型的输出作为相应标签的预测。\n\n![](./深度学习基础/9.png)\n\n- **回归**问题：输出是数值类型\n  \n   举例：通过各种影响因素预测房价、预测用户对一部电影的评分可以被归类为一个回归问题\n\n- **分类**问题：输出是类别的分类问题的常见损失函数被称为 **交叉熵** （cross-entropy）\n  \n   举例：从手写数据集中区分0~9（类别问题）、以下图片是否是毒蘑菇（二分类问题）\n\n![](./深度学习基础/10.png)\n\n模型通常给出的是一个概率：比如输入以上蘑菇，分类器可能输出0.8\n可以这样理解：分类器90%确定图像描绘的是一只猫\n\n### 1.4.2 无监督学习\n\n监督学习要向模型提供巨大数据集：每个样本包含特征和相应标签值。\n\n相反，如果工作没有十分具体的目标，就需要“自发”地去学习了。 比如，老板可能会给我们一大堆数据，然后要求用它做一些数据科学研究，却没有对结果有要求。 这类数据中不含有“目标”的机器学习问题通常被为 **无监督学习**（unsupervised learning）\n\n- 聚类 （clustering）问题：没有标签的情况下，我们是否能给数据分类呢？比如，给定一组照片，我们能把它们分成风景照片、狗、婴儿、猫和山峰的照片吗？同样，给定一组用户的网页浏览记录，我们能否将具有相似行为的用户聚类呢？\n  \n- 主成分分析 （principal component analysis）问题：我们能否找到少量的参数来准确地捕捉数据的线性相关属性？比如，一个球的运动轨迹可以用球的速度、直径和质量来描述。再比如，裁缝们已经开发出了一小部分参数，这些参数相当准确地描述了人体的形状，以适应衣服的需要。另一个例子：在欧几里得空间中是否存在一种（任意结构的）对象的表示，使其符号属性能够很好地匹配?这可以用来描述实体及其关系，例如“罗马” − “意大利” + “法国” = “巴黎”。\n  \n- 因果关系 （causality）和 概率图模型 （probabilistic graphical models）问题：我们能否描述观察到的许多数据的根本原因？例如，如果我们有关于房价、污染、犯罪、地理位置、教育和工资的人口统计数据，我们能否简单地根据经验数据发现它们之间的关系？\n\n- 生成对抗性网络 （generative adversarial networks）：为我们提供一种合成数据的方法，甚至像图像和音频这样复杂的非结构化数据。潜在的统计机制是检查真实和虚假数据是否相同的测试，它是无监督学习的另一个重要而令人兴奋的领域。\n\n### 1.4.3 半监督学习\n\n半监督学习（Semi-Supervised Learning, SSL）是一种介于监督学习和无监督学习之间的机器学习方法。它利用少量标注数据和大量未标注数据共同训练模型，目标是提高模型的性能，同时减少对标注数据的依赖。半监督学习方法在标注数据获取成本较高或数据标注较困难的场景中非常有用，例如医学影像分析、自然语言处理和计算机视觉等领域。\n\n- 标记样本少的类别：可以用聚类算法来标记样本少的类别。\n- 标记样本多的类别：可以用生成模型来标记样本多的类别。\n\n### 1.4.4 强化学习\n\n强化学习（Reinforcement Learning）是机器学习的一种方法，它通过与环境的互动来学习。\n\n强化学习的目标是产生一个好的 **策略** （policy）。\n\n模型根据对环境的观察产生一定的动作，将这个动作应用到环境当中，模型从环境中获得 **奖励**\n\n举例：AlphaGo\n\n[本科毕设 非嵌入式离线强化学习制作皇室战争AI与8000分人机的获胜对局](https://www.bilibili.com/video/BV1xn4y1R7GQ/?share_source=copy_web&vd_source=e4838a460d5e965db0426ab9bd050b56)\n\n## 1.4 用三张图理解深度学习的工作原理\n\n![](./深度学习基础/3.png)\n\n![](./深度学习基础/4.png)\n\n## 1.5 深度学习的硬件\n\nCPU、GPU、TPU(张量处理器)\n\n[【硬核科普】从零开始认识显卡](https://www.bilibili.com/video/BV1xE421j7Uv/?share_source=copy_web&vd_source=e4838a460d5e965db0426ab9bd050b56)\n\n2007年，NVIDIA推出了CUDA，它是一种基于GPU的并行编程模型，可以让程序员编写并行代码，并在GPU上运行。\n\n## 1.6 深度学习的历史与发展\n\n### 1.6.1 神经网络的核心关键原则：\n1. **线性和非线性处理单元的交替**  \n   通常称为层（layers）。\n2. **使用链式规则（也称为反向传播 Backpropagation）**  \n   一次性调整网络中的全部参数。\n\n### 1.6.2深度学习的提出历史：\n- 一些中流砥柱的模型：\n  - 多层感知机（McCulloch and Pitts, 1943）\n  - 卷积神经网络（LeCun et al., 1998）\n  - 长短期记忆网络（Graves and Schmidhuber, 2005）\n  - Q学习（Watkins and Dayan, 1992）\n- 曾因对休眠期和当时技术限制被搁置一段时间后，过去十年被重新发现。\n\n### 1.6.3 为什么最近十几年深度学习才重新“热门”？\n1. **网络和图像传感器的发展使得数据的获取变得廉价**  \n   - 大量图片、视频和用户数据信息使得大规模数据集变得触手可及。\n2. **运算设备的算力发展**  \n   - GPU的普及，使大规模算力唾手可得。\n3. **深度学习框架在传播想法方面发挥了至关重要的作用**  \n   - 例如，PyTorch 和 TensorFlow。\n   - 在2014年之前，对卡内基梅隆大学机器学习博士生来说，训练全性能回归模型曾是一个复杂的作业问题。而现在，这项任务只需不到10行代码即可完成。\n\n# 2. 神经网络的基本数学概念\n\n## 2.1 张量 (Tensor) 介绍\n\n张量是多维数组的泛化，用于表示标量、向量、矩阵及更高维数据。\n\n1. **标量 (Scalar)**  \n   标量是零维张量，仅表示一个数值，例如：  \n   ```python\n   x = np.array(5)  # 标量\n   ```\n\n2. **向量 (Vector)**  \n   向量是一维张量，例如：  \n   ```python\n   x = np.array([1, 2, 3])  # 向量\n   ```\n\n3. **矩阵 (Matrix)**  \n   矩阵是二维张量，例如：  \n   ```python\n   x = np.array([[1, 2], [3, 4]])  # 矩阵\n   ```\n\n4. **张量 (Tensor)**  \n   张量是更高维度的数组\n\n## 2.2 张量运算的导数——梯度 (Gradient)\n\n导数这一概念可以应用于任意函数，只要函数所对应的表面是连续且光滑的。张量运算（或张量函数）的导数叫作梯度（gradient）。梯度就是将导数这一概念推广到以张量为输入的函数，张量函数的梯度表示该函数所对应多维表面的曲率（curvature）。\n\n\n## 2.3 链式求导（Chain Rule）\n\n链式求导是神经网络梯度计算的核心工具，用于计算复合函数的导数。  \n\n如果函数 $z = f(g(x))$，则导数计算为： \n\n$$\n\\frac{\\partial z}{\\partial x} = \\frac{\\partial z}{\\partial g} \\cdot \\frac{\\partial g}{\\partial x}\n$$\n\n在神经网络中，每一层的输出是上一层的输入，链式求导用于将输出误差逐层反传以更新权重。\n   \n## 2.4 随机梯度下降 (Stochastic Gradient Descent)\n\n给定一个可微函数，理论上可以用解析法找到它的最小值，找到所有导数为0的点，然后比较函数在其中哪个点的取值最小。将这一方法应用于神经网络，就是用解析法求出**损失函数**最小值对应的所有权重值。但在实际中，求解析解往往是不可行的。\n\n> 一个两个参数求解析解还好说，但是神经网络的参数不会少于几千个，而且经常有上千万个。\n\nSGD的步骤：\n\n1. 抽取训练样本 x 和对应目标 y_true 组成的一个数据批量。\n2. 在 x 上运行模型，得到预测值 y_pred。这一步叫作**前向传播**。\n3. 计算模型在这批数据上的损失值，用于衡量 y_pred 和 y_true 之间的差距。\n4. 计算损失相对于模型参数的梯度。这一步叫作**反向传播**（backward pass）。\n5. 将参数沿着梯度的反方向移动一小步，比如 W -= learning_rate* gradient，从而使这批数据上的损失值减小一些。**学习率**（learning_rate）是一个调节梯度下降“速度”的标量因子。\n   \n|⼀维损失函数曲线的随机梯度下降|⼆维损失表⾯的梯度下降|\n|---|---|\n|![](./深度学习基础/11.png)|![](./深度学习基础/12.png)|\n\n如你所见，直观上来看，`learning_rate` 因子的取值很重要。如果取值太小，那么沿着曲线下降需要很多次迭代，而且可能会陷入局部极小点（鞍点）。如果取值过大，那么更新权重值之后可能会出现在曲线上完全随机的位置。\n\n![](./深度学习基础/13.png)\n\n> 局部最⼩点的解决办法：动量。\n> \n> 更新参数 w 不仅要考虑当前梯度值，还要考虑上⼀次参数更新。\n> \n> w(新) = w(旧) + momentum(动量因⼦) * velocity - learning_rate * gradient\n\n## 2.5 反向传播 (Backpropagation)\n\n反向传播是通过**链式法则**计算神经⽹络梯度的算法。\n\n反向传播的⼯作流程：\n1. 前向传播：从输⼊层到输出层计算⽹络的预测值。\n2. 损失计算：通过损失函数衡量预测值与真实值的误差。\n3. 反向传播：利⽤链式求导从输出层逐层计算梯度。\n4. 参数更新：使⽤优化器更新权重和偏置。\n\n## 2.6 优化器 (Optimizer)\n\n优化器是用于最小化损失函数的算法，通过梯度更新神经网络的参数。\n\n### 常见优化器\n\n1. **随机梯度下降 (SGD)**  \n\n- 批量随机梯度下降，随机梯度下降，小批量随机梯度下降\n\n2. **AdaGrad**  \n\n- 适合处理稀疏数据，但学习率可能逐渐变小。\n\n3. **RMSProp**  \n\n- 通过均方根调整学习率，适合非平稳目标。\n\n4. **Adam**  \n综合了动量法和 RMSProp：  \n\n## 2.7 用计算图看正向传播和反向传播\n\n![](./深度学习基础/27.png)\n\n前向传播的过程比较简单，从输入层开始，逐层计算每一层的输出，直到得到最终的预测值。\n\n“如果反过来看？”\n\n|||\n|---|---|\n|![](./深度学习基础/28.png)|![](./深度学习基础/29.png)|\n\n对该图应用**链式法则**，可以计算出我们想要的梯度（损失函数相对于参数的梯度偏导）：\n\n- grad(loss_val,w) = 1 x 1 x 2 = 2\n- grad(loss_val,b) = 1 x 1 = 1\n\n然后，我们就可以用这些梯度来更新参数w和b了。\n\n# 3. 从线性回归到神经网络\n\n## 3.1 主要目的\n\n学习如何⽤PyTorch编程。\n\n## 3.2 任务目标\n\n线性回归的式⼦满⾜：y = w*x + b，其中w和b均为参数，x，y可以理解成特征值和⽬标值，在程序中我们指定x，w，b，⽬标值y也随之确定了下来。然后将x通过神经⽹络进⾏训练，我们希望通过训练，使得随机初始化的参数w和b能够逼近⼀开始我们指定的w，b，使得预测值pred和实际的⽬标值y能够⽆限接近。\n\n\n## 3.3 损失函数 (Loss Function)\n\n损失函数⽤于衡量模型预测值与真实值的差距。通常我们会选择⾮负数作为损失，且数值越⼩表⽰损失越⼩，完美预测时的损失为0。回归问题中最常⽤的损失函数是平⽅误差函数。\n\n$$ \nl^{(i)}(\\mathbf{w}, b) = \\frac{1}{2} \\left( \\hat{y}^{(i)} - y^{(i)} \\right)^2\n$$\n\n> $\\frac{1}{2}$并不会带来本质上的区别，只是为了求导简单\n\n![](./深度学习基础/16.png)\n\n我们需要计算在训练集n个样本上的损失均值：\n\n$$ \nL(\\mathbf{w}, b) = \\frac{1}{n} \\sum_{i=1}^{n} l^{(i)}(\\mathbf{w}, b) = \\frac{1}{n} \\sum_{i=1}^{n} \\frac{1}{2}\n\\left( \\mathbf{w}^\\top \\mathbf{x}^{(i)} + b - y^{(i)} \\right)^2. \n$$\n\n## 3.4 代码实现\n\n```python\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport matplotlib.pyplot as plt\n\n# 1. 生成数据\n# 创建一些模拟数据，假设 y = 3x + 2 + 噪声\ntorch.manual_seed(42)  # 设置随机种子\nx = torch.linspace(0, 10, 100).unsqueeze(1)  # 输入数据 (100, 1)\ny = 3 * x + 2 + torch.randn(100, 1) * 2  # 输出数据带噪声 (100, 1)\n\n# 2. 定义一个简单的线性回归模型\nclass LinearRegressionModel(nn.Module):\n    def __init__(self):\n        super(LinearRegressionModel, self).__init__()\n        self.linear = nn.Linear(1, 1)  # 输入特征维度1，输出特征维度1\n\n    def forward(self, x):\n        return self.linear(x)\n\nmodel = LinearRegressionModel()\n\n# 3. 定义损失函数和优化器\ncriterion = nn.MSELoss()  # 均方误差损失\noptimizer = optim.SGD(model.parameters(), lr=0.01)  # 随机梯度下降优化器\n\n# 4. 训练模型\nepochs = 100  # 迭代次数\nlosses = []  # 记录损失\n\nfor epoch in range(epochs):\n    model.train()  # 设置为训练模式\n    optimizer.zero_grad()  # 清空梯度\n\n    predictions = model(x)  # 模型预测\n    loss = criterion(predictions, y)  # 计算损失\n    loss.backward()  # 反向传播计算梯度\n    optimizer.step()  # 更新模型参数\n\n    losses.append(loss.item())  # 记录损失\n\n    # 每100次输出一次训练信息\n    if (epoch + 1) % 10 == 0:\n        print(f\"Epoch {epoch+1}/{epochs}, Loss: {loss.item():.4f}\")\n\n# 5. 可视化训练结果\n# 绘制损失曲线\nplt.figure(figsize=(10, 5))\nplt.plot(range(epochs), losses)\nplt.title(\"Loss Curve\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"MSE Loss\")\nplt.show()\n\n# 绘制预测结果\nmodel.eval()  # 设置为评估模式\nwith torch.no_grad():\n    predicted = model(x)  # 模型预测\n\nplt.figure(figsize=(10, 5))\nplt.scatter(x.numpy(), y.numpy(), label=\"Ground Truth\")  # 原始数据\nplt.plot(x.numpy(), predicted.numpy(), color=\"red\", label=\"Predicted\")  # 预测结果\nplt.legend()\nplt.title(\"Linear Regression Result\")\nplt.show()\n```\n\n|![](./深度学习基础/14.png)|![](./深度学习基础/15.png)|\n|---|---|\n|损失曲线|预测结果|\n\n学习链接：[详解使⽤pytorch实现线性回归](https://blog.csdn.net/Delusional/article/details/113097030?fromshare=blogdetail&sharetype=blogdetail&sharerId=113097030&sharerefer=PC&sharesource=m0_72845244&sharefrom=from_link)\n\n\n# 4. 机器学习基础知识\n\n## 4.1 机器学习的目标\n\n泛化：模型在未见过的数据上的表现。\n\n### 4.1.1 ⽋拟合和过拟合\n\n> 根据泛化的定义，我们希望模型在我们没有训练过的数据上也取得很好的效果，⽽不是只在训练集上有很好的效果。\n\n- 欠拟合：模型在训练集和测试集上表现都很差。\n\n- 过拟合：模型在训练集上表现很好，但在测试集上表现很差。\n\n其实很好理解，训练开始时，模型还没有对训练数据中的所有相关模式建模。因此，模型在训练集和测试集上的表现都很差，这就是欠拟合。\n\n训练到一定程度后，模型开始仅学习和训练数据有关的模式，并且开始学习训练数据中的噪声和细节，但对新数据而言，这些噪声和细节是不相关的。这就是过拟合。\n\n![](./深度学习基础/20.png)\n\n### 4.1.2 嘈杂的训练数据\n\nMNIST数据集中就有很多异常值。\n\n|||\n|----|----|\n|![](./深度学习基础/22.png)|![](./深度学习基础/23.png)\n\n如果模型将这些异常值(噪声)全部考虑进去，那么它的泛化性能将会下降\n\n![](./深度学习基础/24.png)\n\n左边是稳健拟合，右边是过拟合\n\n## 4.2 评估机器学习的性能\n\n> 优化和泛化之间的矛盾，欠拟合和过拟合之间的矛盾\n\n### 4.2.1 训练集、验证集和测试集\n\n1. 简单的留出验证\n   - 一般验证集占数据集的20%\n2. K折交叉验证\n   - 有时候验证集很少，无法在统计学上代表数据\n   ![](./深度学习基础/21.png)\n\n### 4.2.2 评估模型的注意事项\n\n- 数据的代表性\n- 数据冗余\n\n## 4.3 改进模型拟合\n\n1. 调节关键梯度下降参数\n\n   - 学习率\n   - 批量大小\n  \n2. 利用更好的模型架构\n\n3. 提高模型的容量(大小)\n\n## 4.4 提高模型的泛化能力\n\n1. 数据集管理\n2. 提前终止，防止过拟合\n3. 模型正则化\n   - 缩减模型容量\n   - 权重正则化\n   - Dropout\n      ![](./深度学习基础/25.png)\n\n# 5. 多层感知机（MLP）从入门到实践\n\n在上⾯的线性神经⽹络中我们了解很多深度学习的概念，那现在我们要深⼊对于深度神经⽹络的探索。\n\n## 5.1 隐藏层 (Hidden Layer)\n\n> 隐藏层是神经⽹络的核⼼，它可以帮助我们学习⾮线性关系。\n\n在线性⽹络中我们描述了仿射变换，这在深度学习种是⼀种线性变换，如果我们的输⼊输出满⾜线性关系，那么这样就⾜够了，但是线性是⼀个很强的假设；线性模型是很容易出错的，因为我们⽆法保证线性相关的关系。\n\n举例：\n\n1. 我们尝试预测⼀个⼈是否会还贷，我们可以认为，在其他条件不变的情况下，收⼊较⾼的申请⼈⽐收⼊较低的申请⼈更有可能偿还贷款。但是，虽然收⼊与还款概率存在单调性，但它们不是线性相关的。收⼊从0增加到5万，可能⽐从100万增加到105万带来更⼤的还款可能性。\n   \n2. 我们想要根据体温预测死亡率。 对体温⾼于37摄⽒度的⼈来说，温度越⾼⻛险越⼤。然⽽，对体温低于37摄⽒度的⼈来说，温度越⾼⻛险就越低。\n\n我们可以通过在⽹络中加⼊⼀个或多个隐藏层来克服线性模型的限制，使其能处理更普遍的函数关系类型。最简单的⽅法就是将多个全连接层连接到⼀起，这种架构通常称为多层感知机（multilayer perceptron），通常缩写为 **MLP**。\n\n![](./深度学习基础/17.png)\n\n- 这是⼀个两层的⽹络\n- 对于这种输入和输出的每个节点都相连的层，我们一般称为**全连接层**或**稠密层**\n- 全连接层的开销⾮常⼤，需要权衡性能和参数规模\n\n仿射变换=权重*参数+偏置\n\n> 仿射变换的组合还是仿射变换\n\n那么这个模型还是线性的，依然没有解决上述线性模型表达能⼒弱的问题，我们需要有⼀个函数使他变成⾮线性的：**激活函数**\n\n如果没有激活函数，那么每个隐藏层仅仅只是⼀个仿射函数，与线性模型并⽆区别，为了避免多层感知机模型退化成线性模型，我们需要引⼊激活函数。\n\n## 5.2 激活函数 (Activation Function)\n\n激活函数引⼊⾮线性特性，使神经⽹络能够拟合复杂的函数。\n\n### 常见激活函数\n\n1. Sigmoid\n\n$$ \n\\sigma(x) = \\frac{1}{1 + e^{-x}} \n$$\n\n- 将输出映射到 (0, 1)，适⽤于概率预测。\n- 容易引发梯度消失问题。\n\n![](./深度学习基础/19.png)\n\n1. Tanh\n$$ \n\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}} \n$$\n\n1. ReLU (Rectified Linear Unit)\n   \n$$ \n\\text{ReLU}(x) = \\max(0, x) \n$$\n\n- 当输⼊为负时，ReLU函数的导数为0，⽽当输⼊为正时，ReLU函数的导数为1。\n- 注意，当输⼊值精确等于0时，ReLU函数不可导。在此时，我们默认使⽤左侧的导数，即当输⼊为0时,导数为0。但我们可以忽略这个问题，在⼯程实际中，⼏乎是永远不可能为0的。\n\n![](./深度学习基础/18.png)\n\n1. Softmax\n\n$$ \n\\text{Softmax}(x_i) = \\frac{e^{x_i}}{\\sum_{j=1}^n e^{x_j}} \n$$\n\n- ⽤于多分类任务，将输出转化为概率分布。\n\n## 5.3 softmax分类\n\nsoftmax分类器是多分类问题中常用的分类器，它将输入的特征映射到一个概率分布，使得每个类别的概率之和为1。\n\n![](./深度学习基础/26.png)\n\n现在经过上面三个公式（等于是三个单独的线性回归）的计算，我们已经得到了三个数；为了得到最后预测结果是啥，我们选择最大概率的标签为预测结果。\n\n假设输出为0.1，0.8，0.1，那么我们预测的类别就是2\n\n## 5.4 MLP实战——MNIST⼿写数字识别\n\nMNIST数据集包含60,000个训练样本和10,000个测试样本，每个样本是一个28x28像素的灰度图像，表示一个手写数字（0-9）。目标是训练一个模型，能够准确地识别这些手写数字。\n\nCSDN博客：[keras⼊⻔实例(MNIST数字分类)](https://blog.csdn.net/m0_72845244/article/details/131730803?fromshare=blogdetail&sharetype=blogdetail&sharerId=131730803&sharerefer=PC&sharesource=m0_72845244&sharefrom=from_link)\n\n### Pytorch加载数据集\n\n```python\nimport torch\nfrom torchvision import datasets, transforms\n\n# 数据预处理\ntransform = transforms.Compose([\n    transforms.ToTensor(),  # 转为 PyTorch 的 Tensor 格式\n    transforms.Normalize((0.5,), (0.5,))  # 对数据进行归一化，均值和标准差为 0.5\n])\n\n# 加载训练集和测试集\ntrain_dataset = datasets.MNIST(root='./data', train=True, transform=transform, download=True)\ntest_dataset = datasets.MNIST(root='./data', train=False, transform=transform, download=True)\n\n# 数据加载器\ntrain_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=64, shuffle=True)\ntest_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=64, shuffle=False)\n\nprint(f\"训练集样本数: {len(train_dataset)}\")\nprint(f\"测试集样本数: {len(test_dataset)}\")\n```\n\n[神经网络可视化](https://www.bilibili.com/video/BV1Rz4y1h7nN/?share_source=copy_web&vd_source=e4838a460d5e965db0426ab9bd050b56)\n\n# 5. Linux下配置深度学习环境\n\n## 5.1 安装显卡驱动\n\n强烈建议通过ubuntu22.04的官⽅GUI软件 **软件和更新** 安装显卡驱动。(Linux官⽅把nvidia驱动已经做的相当好了，安装起来也很⽅便。但是NVIDIA驱动其实还会有各式各样的BUG，包括Linux之⽗Linus Torvalds曾经说过的那样：“NVIDIA是最难伺候的硬件制造商，也是我们接触过最糟糕的公司，没有之⼀，~~SO NVIDIA FUCKNVIDIA YOU~~”.)\n\n图标⻓这样(有时候它是灰⾊的), ![](./深度学习基础/6.png)\n\n安装成功后在终端使⽤`nvidia-smi`可以看到GPU信息，看到就算安装成功\n\n```bash\nnvidia-smi\n```\n\n![](./深度学习基础/8.png)\n\n这⾥显⽰的CUDA版本是最⾼⽀持版本，安装个⽐这低的就⾏(但是也不能太低，下⾯会讲)。\n\n![](./深度学习基础/7.png)\n\n如果想要更改显卡驱动，也可以在这⾥改。\n\n> 显卡驱动安装需要谨慎对待，尽量安装recommend版本，否则可能会导致ubuntu桌⾯不显⽰、开机不了、电脑副屏幕不显⽰等问题。\n\n> 装错显卡驱动时，不到万不得已，不要使⽤`sudo apt autoremove`，这是下下策。\n\n## 5.2 安装CUDA\n\n显卡驱动版本和CUDA版本有⼀定的对应关系。\n\nCUDA版本：[CUDA Toolkit Archive](https://developer.nvidia.com/cuda-toolkit-archive)\n\nCUDA版本和驱动版本的对应关系可以看: [不同版本cuda对应的NVIDIA驱动版本](https://sundaygeek.blog.csdn.net/article/details/86695400?fromshare=blogdetail&sharetype=blogdetail&sharerId=86695400&sharerefer=PC&sharesource=m0_72845244&sharefrom=from_link)\n\n> 但是CUDA版本也不⼀定是越新越好，某些较新的CUDA版本可能没有pytorch的适配版本，所以安装时要注意。(这其实是配环境很常⻅的事情，不同软件由不同公司⼚家开发，进度各有快慢，版本兼容性也不⼀样，所以需要注意。)\n\n**不要下载deb格式的，下载runfile！！！！**\n\nCuda的⼀个安装教程： https://yinguobing.com/install-cuda11-with-runfile/\n\n```bash\nnvcc -V\n```\n\n![](./深度学习基础/8.png)\n\n如果显⽰了这个代表安装成功。这⾥显⽰的CUDA版本是11.5，同学们也可以下载这个版本的CUDA。\n\n## 5.3 安装Python环境\n\n我们要使⽤pip⼯具安装深度学习的⼀些包，有numpy、tensorflow、keras、pytorch等\n\n```bash\npip install numpy tensorflow keras torch torchvision -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n后⾯的 https://pypi.tuna.tsinghua.edu.cn/simple 是清华⼤学的镜像源地址，下载速度⽐较快。\n\n如果不想安装tensorflow，可以只安装pytorch。把 tensorflow keras 去掉。\n\n> 这⾥的安装命令是安装最新版本适配你电脑python环境的包，如果想安装特定版本的包，可以加上版本号。\n\n> 如果发现还是下载不了，也可以在官⽹上找到你想要torch和torchvision的版本，然后⼿动下载安装。\n\n官⽹下载：[torch版本⼤全](https://download.pytorch.org/whl/torch_stable.html)\n\n然后使⽤pip安装。\n\n```bash\npip install *.whl\n```\n\n最后，检查⼀下pytorch是否安装成功。是否能使⽤cuda。\n```bash\npython\nimport torch\ntorch.cuda.is_available()\n```\n如果能输出True，那么恭喜你安装成功。\n\n## 5.4 安装Anaconda\n\nAnaconda是⼀个python包管理虚拟环境（可装可不装，不过还是建议装上）\n\n官⽹： https://zhuanlan.zhihu.com/p/459607806\n\n可以参考的国内教程： https://zhuanlan.zhihu.com/p/459607806\n\n官⽹安装教程： https://docs.anaconda.com/free/anaconda/install/linux/\n\n因为ubuntu22.04默认安装了python3.10.7，正常就是ROS2 Humble需要的python版本，所以可以直接使⽤本机的python版本。\n\n> 如果有需要使⽤某些Qt程序，⽐如PyQt5，可能需要利⽤Anacoda安装python的3.9版本才能使⽤Qt。正常使⽤时来回切换python版本即可。\n\n```bash\nconda create -n XXX python=3.9\nconda activate XXX # 进入虚拟环境\n```\n\n```bash\nconda deactivate # 退出虚拟环境\n```\n\n> 如果配置有困难的同学可以先使⽤`Google Colab`进⾏深度学习实验。但是配环境是每⼀个RoboMaster\n视觉组新⼿⼩⽩都需要的基本能⼒，建议⼤家都掌握。\n\n---\n\n# 作业\n\n重新实现课上的MNIST⼿写数字识别分类的例子。\n\n要求：\n1. 使用PyTorch实现。\n2. 要求使用**多层感知机MLP**模型。\n3. 在Gitee中提交python代码或或ipynb文件和训练结果(曲线图)。\n\n截止日期：看群通知。";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"前言","text":"前言#"},{"depth":1,"slug":"1-初识深度学习","text":"1. 初识深度学习#"},{"depth":2,"slug":"11-什么是深度学习","text":"1.1 什么是深度学习#"},{"depth":2,"slug":"12-robomaster与深度学习","text":"1.2 RoboMaster与深度学习#"},{"depth":2,"slug":"13-机器学习与深度学习","text":"1.3 机器学习与深度学习#"},{"depth":3,"slug":"131-机器学习","text":"1.3.1 机器学习#"},{"depth":3,"slug":"132-深度学习之深度","text":"1.3.2 深度学习之“深度”#"},{"depth":2,"slug":"14-机器学习算法","text":"1.4 机器学习算法#"},{"depth":3,"slug":"141-监督学习","text":"1.4.1 监督学习#"},{"depth":3,"slug":"142-无监督学习","text":"1.4.2 无监督学习#"},{"depth":3,"slug":"143-半监督学习","text":"1.4.3 半监督学习#"},{"depth":3,"slug":"144-强化学习","text":"1.4.4 强化学习#"},{"depth":2,"slug":"14-用三张图理解深度学习的工作原理","text":"1.4 用三张图理解深度学习的工作原理#"},{"depth":2,"slug":"15-深度学习的硬件","text":"1.5 深度学习的硬件#"},{"depth":2,"slug":"16-深度学习的历史与发展","text":"1.6 深度学习的历史与发展#"},{"depth":3,"slug":"161-神经网络的核心关键原则","text":"1.6.1 神经网络的核心关键原则：#"},{"depth":3,"slug":"162深度学习的提出历史","text":"1.6.2深度学习的提出历史：#"},{"depth":3,"slug":"163-为什么最近十几年深度学习才重新热门","text":"1.6.3 为什么最近十几年深度学习才重新“热门”？#"},{"depth":1,"slug":"2-神经网络的基本数学概念","text":"2. 神经网络的基本数学概念#"},{"depth":2,"slug":"21-张量-tensor-介绍","text":"2.1 张量 (Tensor) 介绍#"},{"depth":2,"slug":"22-张量运算的导数梯度-gradient","text":"2.2 张量运算的导数——梯度 (Gradient)#"},{"depth":2,"slug":"23-链式求导chain-rule","text":"2.3 链式求导（Chain Rule）#"},{"depth":2,"slug":"24-随机梯度下降-stochastic-gradient-descent","text":"2.4 随机梯度下降 (Stochastic Gradient Descent)#"},{"depth":2,"slug":"25-反向传播-backpropagation","text":"2.5 反向传播 (Backpropagation)#"},{"depth":2,"slug":"26-优化器-optimizer","text":"2.6 优化器 (Optimizer)#"},{"depth":3,"slug":"常见优化器","text":"常见优化器#"},{"depth":2,"slug":"27-用计算图看正向传播和反向传播","text":"2.7 用计算图看正向传播和反向传播#"},{"depth":1,"slug":"3-从线性回归到神经网络","text":"3. 从线性回归到神经网络#"},{"depth":2,"slug":"31-主要目的","text":"3.1 主要目的#"},{"depth":2,"slug":"32-任务目标","text":"3.2 任务目标#"},{"depth":2,"slug":"33-损失函数-loss-function","text":"3.3 损失函数 (Loss Function)#"},{"depth":2,"slug":"34-代码实现","text":"3.4 代码实现#"},{"depth":1,"slug":"4-机器学习基础知识","text":"4. 机器学习基础知识#"},{"depth":2,"slug":"41-机器学习的目标","text":"4.1 机器学习的目标#"},{"depth":3,"slug":"411-拟合和过拟合","text":"4.1.1 ⽋拟合和过拟合#"},{"depth":3,"slug":"412-嘈杂的训练数据","text":"4.1.2 嘈杂的训练数据#"},{"depth":2,"slug":"42-评估机器学习的性能","text":"4.2 评估机器学习的性能#"},{"depth":3,"slug":"421-训练集验证集和测试集","text":"4.2.1 训练集、验证集和测试集#"},{"depth":3,"slug":"422-评估模型的注意事项","text":"4.2.2 评估模型的注意事项#"},{"depth":2,"slug":"43-改进模型拟合","text":"4.3 改进模型拟合#"},{"depth":2,"slug":"44-提高模型的泛化能力","text":"4.4 提高模型的泛化能力#"},{"depth":1,"slug":"5-多层感知机mlp从入门到实践","text":"5. 多层感知机（MLP）从入门到实践#"},{"depth":2,"slug":"51-隐藏层-hidden-layer","text":"5.1 隐藏层 (Hidden Layer)#"},{"depth":2,"slug":"52-激活函数-activation-function","text":"5.2 激活函数 (Activation Function)#"},{"depth":3,"slug":"常见激活函数","text":"常见激活函数#"},{"depth":2,"slug":"53-softmax分类","text":"5.3 softmax分类#"},{"depth":2,"slug":"54-mlp实战mnist写数字识别","text":"5.4 MLP实战——MNIST⼿写数字识别#"},{"depth":3,"slug":"pytorch加载数据集","text":"Pytorch加载数据集#"},{"depth":1,"slug":"5-linux下配置深度学习环境","text":"5. Linux下配置深度学习环境#"},{"depth":2,"slug":"51-安装显卡驱动","text":"5.1 安装显卡驱动#"},{"depth":2,"slug":"52-安装cuda","text":"5.2 安装CUDA#"},{"depth":2,"slug":"53-安装python环境","text":"5.3 安装Python环境#"},{"depth":2,"slug":"54-安装anaconda","text":"5.4 安装Anaconda#"},{"depth":1,"slug":"作业","text":"作业#"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
